import{_ as s,o as n,c as a,U as l}from"./chunks/framework.70292381.js";const d=JSON.parse('{"title":"Android Compose 笔记","description":"","frontmatter":{"title":"Android Compose 笔记","date":"2021-08-25T00:00:00.000Z","categories":["Android"],"tags":["Android Compose"]},"headers":[],"relativePath":"posts/2021-08-25-Android Compose 笔记.md","filePath":"posts/2021-08-25-Android Compose 笔记.md"}'),o={name:"posts/2021-08-25-Android Compose 笔记.md"},p=l(`<h1 id="android-compose-笔记" tabindex="-1">Android Compose 笔记 <a class="header-anchor" href="#android-compose-笔记" aria-label="Permalink to &quot;Android Compose 笔记&quot;">​</a></h1><ol><li><p>Compose 是一个方法，没有返回值，需要使用 <code>@composable</code> 注解标记. 在 Compose 进行界面的描述。Compose 可能会频繁重复执行，需要保证其轻量，不能进行耗时的操作如读取文件. 界面重绘制时系统会尽量保证只绘制有影响的的组件.</p></li><li><p>Compose 组件不会自动更新状态，对比：传统组件 <code>EditText</code> 会自己更新用户输入的内容；可以使用 <code>remember</code> 方法在 Compose 中缓存一个值，并且重绘时返回该值 (不同于变量，因为 Compose 是方法，当 Compose 再次被调用的时候变量会被重新初始化)，<code>remember</code> 不会在配置改变的时候保留 (屏幕旋转，界面被回收重建)，如果需要保留使用 <code>rememberSaveable</code></p></li><li><p>在需要多个相同 Compose 组件时使用 <code>key</code> 来避免数据变化引起的不必要的重组，</p></li></ol><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">@Composable</span></span>
<span class="line"><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MoviesScreen</span><span style="color:#A6ACCD;">(movies: </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">Movie</span><span style="color:#A6ACCD;">&gt;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Column</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (movie </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> movies) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">key</span><span style="color:#A6ACCD;">(movie.id) { </span><span style="color:#676E95;font-style:italic;">// Unique ID for this movie</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">MovieOverview</span><span style="color:#A6ACCD;">(movie)</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p><img src="https://developer.android.google.cn/images/jetpack/compose/lifecycle-newelement-top-keys.png?hl=zh-cn" alt="key"></p><ol start="4"><li><p>通过 <code>@Stable</code> 注解标注稳定的 Compose 组件，可以略过重组检测</p></li><li><p>在 Compose 中启动协程 <code>LaunchedEffect(key)</code> ， 在组和之外(点击事件)使用协程通过 <code>rememberCoroutineScope</code> 获取 Scope 感知 Compose 声明周期，<code>LaunchedEffect</code> 的 <code>key</code> 发生改变或方法体内的引用发生改变时会导致协程重启， 可以通过 <code>rememberUpdatedState</code> 来创建一个引用，在 “效应” 中使用时 “引用值改变” 不会导致协程重启。</p></li><li><p><strong>效应</strong> 包含 <code>remember*</code>, <code>*Effect</code></p></li><li><p>在 Compose 结束的时候清理注册 <code>DisposableEffect</code></p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">@Composable</span></span>
<span class="line"><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BackHandler</span><span style="color:#A6ACCD;">(backDispatcher: </span><span style="color:#FFCB6B;">OnBackPressedDispatcher</span><span style="color:#A6ACCD;">, onBack: () </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">&gt; Unit) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 阻止因 onBack 改变而导致的 remember 改变</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> currentOnBack </span><span style="color:#C792EA;">by</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rememberUpdatedState</span><span style="color:#A6ACCD;">(onBack)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// Remember in Composition a back callback that calls the \`onBack\` lambda</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> backCallback </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">remember</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// Always intercept back events. See the SideEffect for</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// a more complete version</span></span>
<span class="line"><span style="color:#A6ACCD;">        object : </span><span style="color:#FFCB6B;">OnBackPressedCallback</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">true</span><span style="color:#A6ACCD;">) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handleOnBackPressed</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">currentOnBack</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// If \`backDispatcher\` changes, dispose and reset the effect</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">DisposableEffect</span><span style="color:#A6ACCD;">(backDispatcher) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// Add callback to the backDispatcher</span></span>
<span class="line"><span style="color:#A6ACCD;">        backDispatcher.</span><span style="color:#82AAFF;">addCallback</span><span style="color:#A6ACCD;">(backCallback)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// When the effect leaves the Composition, remove the callback</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">onDispose</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">            backCallback.</span><span style="color:#82AAFF;">remove</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div></li><li><p><code>@Composable</code> 不仅可以用来标记 <code>lambda</code> 或者无返回值的函数，还可以标记返回值为 <code>State</code> 的函数; 可以用来表示通用的值避免重复代码，如根据主题返回背景色，前景色</p></li><li><p><code>produceState</code> 启动一个协程返回 <code>@Composable State</code> 对象</p></li><li><p><code>derivedStateOf</code> 在一个方法体中转换一个或多个 <code>State</code></p></li><li><p>架构分层， 层级越低控制粒度越高，需要自己的实现越多</p><p><img src="https://developer.android.google.cn/images/jetpack/compose/layering-major-layers.svg" alt="level"></p><p>​</p></li><li><p>可以通过 <code>CompositionLocal</code> 在 Compose 作用域内提供隐式的值， <code>MaterialTheme</code> 提供了3个可以隐式实例： <code>LocalColors</code>、<code>LocalShapes</code> 和 <code>LocalTypography</code> 可以通过 colors、typography 和 shapes 访问；另外还有 <code>LocalContentAlpha</code> <code>LocalIndication</code> <code>LocalRippleTheme</code> <code>LocalTextSelectionColors</code> 另外可以在 Compose 中使用 <code>CompositionLocalProvider</code> 修改默认的值。</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">@Composable</span></span>
<span class="line"><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MaterialTheme</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    colors: </span><span style="color:#FFCB6B;">Colors</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MaterialTheme.colors,</span></span>
<span class="line"><span style="color:#A6ACCD;">    typography: </span><span style="color:#FFCB6B;">Typography</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MaterialTheme.typography,</span></span>
<span class="line"><span style="color:#A6ACCD;">    shapes: </span><span style="color:#FFCB6B;">Shapes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MaterialTheme.shapes,</span></span>
<span class="line"><span style="color:#A6ACCD;">    content: </span><span style="color:#FFCB6B;">@Composable</span><span style="color:#A6ACCD;"> () </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">&gt; Unit</span></span>
<span class="line"><span style="color:#A6ACCD;">) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> rememberedColors </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">remember</span><span style="color:#A6ACCD;"> {colors.</span><span style="color:#82AAFF;">copy</span><span style="color:#A6ACCD;">()}.</span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;"> { </span><span style="color:#82AAFF;">updateColorsFrom</span><span style="color:#A6ACCD;">(colors) }</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> rippleIndication </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rememberRipple</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> selectionColors </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rememberTextSelectionColors</span><span style="color:#A6ACCD;">(rememberedColors)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">CompositionLocalProvider</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        LocalColors provides rememberedColors,</span></span>
<span class="line"><span style="color:#A6ACCD;">        LocalContentAlpha provides ContentAlpha.high,</span></span>
<span class="line"><span style="color:#A6ACCD;">        LocalIndication provides rippleIndication,</span></span>
<span class="line"><span style="color:#A6ACCD;">        LocalRippleTheme provides MaterialRippleTheme,</span></span>
<span class="line"><span style="color:#A6ACCD;">        LocalShapes provides shapes,</span></span>
<span class="line"><span style="color:#A6ACCD;">        LocalTextSelectionColors provides selectionColors,</span></span>
<span class="line"><span style="color:#A6ACCD;">        LocalTypography provides typography</span></span>
<span class="line"><span style="color:#A6ACCD;">    ) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">ProvideTextStyle</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> typography.body1, content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> content)</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">@Composable</span></span>
<span class="line"><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CompositionLocalExample</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">MaterialTheme</span><span style="color:#A6ACCD;"> { </span><span style="color:#676E95;font-style:italic;">// MaterialTheme sets ContentAlpha.high as default</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">Column</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">Text</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;Uses MaterialTheme&#39;s provided alpha&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">CompositionLocalProvider</span><span style="color:#A6ACCD;">(LocalContentAlpha provides ContentAlpha.medium) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">Text</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;Medium value provided for LocalContentAlpha&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">Text</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;This Text also uses the medium value&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">CompositionLocalProvider</span><span style="color:#A6ACCD;">(LocalContentAlpha provides ContentAlpha.disabled) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#82AAFF;">DescendantExample</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">                }</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div></li><li><p>布局</p><p><img src="https://developer.android.google.cn/images/jetpack/compose/layout-column-row-box.png" alt="layout"></p></li><li><p>修饰符：</p><ul><li>更改可组合项的大小、布局、行为和外观</li><li>添加信息，如无障碍标签</li><li>处理用户输入</li><li>添加高级互动，如使元素可点击、可滚动、可拖动或可缩放</li></ul><p>默认父组件会包裹子组件，也可通过 <code>size</code> 设置尺寸另外子组件可以通过 <code>requiredSize</code> 更改自身的限定尺寸(requiredSize 的优先级比 size高)，<code>fillMaxHeight</code> <code>fillMaxSize</code> 和 <code>fillMaxWidth</code> 用于填充父组件</p><p><code>paddingFromBaseline</code> 用于设置文本基线上方的内边距</p><p><code>offset</code> 修饰符用于修改组件基于0点的偏移量，可以x, y 轴，数值可负；并且不会影响组件的测量</p><p>在 <code>Box</code> 组件中使用 <code>matchParentSize</code> 将不会占居多余的空间来填充父组件， <code>fillMaxSize</code> 会通过填满父组件来</p><p>在 Row 和 Column 中可以使用 <code>weight</code> 设置权重</p></li><li><p>自定义布局：每个组件都有一个位置 (x,y) 和大小 (width,height) ，单遍测量</p></li><li><p>主题： 支持三个属性 <code>colors</code> <code>typography</code> <code>shapes</code></p><ul><li><p>color可以指定:<code> primary, primaryVariant, onPrimary, secondary, onSecondary, background, onBackground, surface, onSurface, error, onError</code></p></li><li><p>typography可以指定: <code> h1, h2, h3, h4, h5, h6, subtitle1, subtitle2, body1, body2, button, caption, overline</code></p></li><li><p>shape: 可以指定三种： <code>small，medium，large</code></p></li></ul></li><li><p>列表： <code>Row</code>, <code>Column</code>, <code>LazyColumn</code>, <code>LazyRow</code>, <code>LazyVerticalGrid</code></p><ul><li>在lazy* 的作用域中 使用<code>item</code>添加一个，<code>items(Int)</code>添加多个(有点像构造函数), 使用<code>stickHeader</code> 添加粘性头部</li></ul><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// TODO: This ideally would be done in the ViewModel</span></span>
<span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> grouped </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> contacts.</span><span style="color:#82AAFF;">groupBy</span><span style="color:#A6ACCD;"> { it.firstName[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">@OptIn</span><span style="color:#A6ACCD;">(ExperimentalFoundationApi::</span><span style="color:#82AAFF;">class</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">@Composable</span></span>
<span class="line"><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ContactsList</span><span style="color:#A6ACCD;">(grouped: </span><span style="color:#FFCB6B;">Map</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">Char</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">Contact</span><span style="color:#A6ACCD;">&gt;&gt;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">LazyColumn</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        grouped.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;"> { (initial, contactsForInitial) </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">stickyHeader</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">CharacterHeader</span><span style="color:#A6ACCD;">(initial)</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">items</span><span style="color:#A6ACCD;">(contactsForInitial) { contact </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">ContactListItem</span><span style="color:#A6ACCD;">(contact)</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><ul><li>同过 <code>LazyListState</code> 可以查询列表的状态，并且控制列表滚动位置</li></ul><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">@Composable</span></span>
<span class="line"><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MessageList</span><span style="color:#A6ACCD;">(messages: </span><span style="color:#FFCB6B;">List</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">Message</span><span style="color:#A6ACCD;">&gt;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> listState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rememberLazyListState</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// Remember a CoroutineScope to be able to launch</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> coroutineScope </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rememberCoroutineScope</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">LazyColumn</span><span style="color:#A6ACCD;">(state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> listState) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">ScrollToTopButton</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        onClick </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">            coroutineScope.</span><span style="color:#82AAFF;">launch</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">// Animate scroll to the first item</span></span>
<span class="line"><span style="color:#A6ACCD;">                listState.</span><span style="color:#82AAFF;">animateScrollToItem</span><span style="color:#A6ACCD;">(index </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><ul><li>通过设置 <code>itemKey</code> 避免重复渲染，不设置默认使用位置顺序作为 <code>key</code></li></ul></li><li><p>文字 <code>Text()</code>： 可以设置对其，颜色，字体，样式，可见行数，溢出样式；通过<code>buildAnnotatedString</code>可以设置多种样式的文本</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">@Composable</span></span>
<span class="line"><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MultipleStylesInText</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Text</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">buildAnnotatedString</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">withStyle</span><span style="color:#A6ACCD;">(style </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SpanStyle</span><span style="color:#A6ACCD;">(color </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Color.Blue)) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">append</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;H&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">append</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;ello &quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">withStyle</span><span style="color:#A6ACCD;">(style </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SpanStyle</span><span style="color:#A6ACCD;">(fontWeight </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> FontWeight.Bold, color </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Color.Red)) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">append</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;W&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">append</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;orld&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><ul><li>互动： 使文字可选使用<code>SelectionContainer</code> 包裹，<code>DisableSelection</code> 使包裹内的文字不可选</li><li>点击注解： 在文本中添加注解，并获取注解内容</li></ul><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">@Composable</span></span>
<span class="line"><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AnnotatedClickableText</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> annotatedText </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">buildAnnotatedString</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">append</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;Click &quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// We attach this *URL* annotation to the following content</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// until \`pop()\` is called</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">pushStringAnnotation</span><span style="color:#A6ACCD;">(tag </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;URL&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                             </span><span style="color:#C792EA;">annotation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;https://developer.android.com&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">withStyle</span><span style="color:#A6ACCD;">(style </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SpanStyle</span><span style="color:#A6ACCD;">(color </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Color.Blue,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                    fontWeight </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> FontWeight.Bold)) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">append</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;here&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">pop</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">ClickableText</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        text </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> annotatedText,</span></span>
<span class="line"><span style="color:#A6ACCD;">        onClick </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> { offset </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// We check if there is an *URL* annotation attached to the text</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// at the clicked position</span></span>
<span class="line"><span style="color:#A6ACCD;">            annotatedText.</span><span style="color:#82AAFF;">getStringAnnotations</span><span style="color:#A6ACCD;">(tag </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;URL&quot;</span><span style="color:#A6ACCD;">, start </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> offset,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                                    end </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> offset)</span></span>
<span class="line"><span style="color:#A6ACCD;">                .</span><span style="color:#82AAFF;">firstOrNull</span><span style="color:#A6ACCD;">()?.</span><span style="color:#82AAFF;">let</span><span style="color:#A6ACCD;"> { </span><span style="color:#C792EA;">annotation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;font-style:italic;">// If yes, we log its value</span></span>
<span class="line"><span style="color:#A6ACCD;">                    Log.</span><span style="color:#82AAFF;">d</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;Clicked URL&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#C792EA;">annotation</span><span style="color:#A6ACCD;">.item)</span></span>
<span class="line"><span style="color:#A6ACCD;">                }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><ul><li>输入框： <code>TextField</code>, <code>OutlinedTextField</code> 可以设置样式：<code>singleLine</code>, <code>maxLines</code>, <code>textStyle</code> 等，键盘选项： <code>capitalization</code>, <code>autoCorrect</code>, <code>keyboardType</code>, <code>imeAction</code>以及格式设置如将密码替换成<code>*</code></li></ul><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">@Composable</span></span>
<span class="line"><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PasswordTextField</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> password </span><span style="color:#C792EA;">by</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rememberSaveable</span><span style="color:#A6ACCD;"> { </span><span style="color:#82AAFF;">mutableStateOf</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;&quot;</span><span style="color:#A6ACCD;">) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">TextField</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> password,</span></span>
<span class="line"><span style="color:#A6ACCD;">        onValueChange </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> { password </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> it },</span></span>
<span class="line"><span style="color:#A6ACCD;">        label </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> { </span><span style="color:#82AAFF;">Text</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;Enter password&quot;</span><span style="color:#A6ACCD;">) },</span></span>
<span class="line"><span style="color:#A6ACCD;">        visualTransformation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PasswordVisualTransformation</span><span style="color:#A6ACCD;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">        keyboardOptions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">KeyboardOptions</span><span style="color:#A6ACCD;">(keyboardType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> KeyboardType.Password)</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div></li><li><p>自定义图形： 使用 <code>Canvas</code> 构建其作用域提供一个size对象，可查询 <code>Canvas</code> 的宽高； <code>drawLine</code>, <code>drawCircle</code>, <code>drawRect</code>, <code>drawArc</code>, <code>drawImage</code>, <code>drawOval</code>, <code>drawPoints</code> , <code>drawRoundRect</code>, 控制: 边界<code>inset</code>， 旋转 <code>rotate</code> <code>rotateRad</code>, 缩放 <code>scale</code>, 移动 <code>translate</code>, 综合 <code>withTransform</code> ，裁剪 <code>clipPath</code>, <code>clipRect</code></p></li><li><p>动画: <code>AnimatedVisibility</code>, <code>AnimatedContent</code>, <code>animatedContentSize</code>, <code>Crossfade</code>； AnimationSpec： <code>spring</code>, <code>tween</code>, <code>keyframes</code>, <code>repeatable</code>, <code>infiniteRepeatable</code>, <code>snap</code></p></li><li><p>手势: 点按<code>clickable</code>, <code>pointerInput</code>, 滚动 <code>verticalScroll</code>, <code>horizontalScroll</code>, <code>scrollable</code>, <code>dragable</code>, <code>swipeable</code>, <code>transformable</code></p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Modifier.</span><span style="color:#82AAFF;">pointerInput</span><span style="color:#A6ACCD;">(Unit) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">detectTapGestures</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        onPress </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> { </span><span style="color:#676E95;font-style:italic;">/* Called when the gesture starts */</span><span style="color:#A6ACCD;"> },</span></span>
<span class="line"><span style="color:#A6ACCD;">        onDoubleTap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> { </span><span style="color:#676E95;font-style:italic;">/* Called on Double Tap */</span><span style="color:#A6ACCD;"> },</span></span>
<span class="line"><span style="color:#A6ACCD;">        onLongPress </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> { </span><span style="color:#676E95;font-style:italic;">/* Called on Long Press */</span><span style="color:#A6ACCD;"> },</span></span>
<span class="line"><span style="color:#A6ACCD;">        onTap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> { </span><span style="color:#676E95;font-style:italic;">/* Called on Tap */</span><span style="color:#A6ACCD;"> }</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">@Composable</span></span>
<span class="line"><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ScrollableSample</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// actual composable state</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> offset </span><span style="color:#C792EA;">by</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">remember</span><span style="color:#A6ACCD;"> { </span><span style="color:#82AAFF;">mutableStateOf</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0f</span><span style="color:#A6ACCD;">) }</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Box</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        Modifier</span></span>
<span class="line"><span style="color:#A6ACCD;">            .</span><span style="color:#82AAFF;">size</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">150</span><span style="color:#A6ACCD;">.dp)</span></span>
<span class="line"><span style="color:#A6ACCD;">            .</span><span style="color:#82AAFF;">scrollable</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                orientation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Orientation.Vertical,</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">// Scrollable state: describes how to consume</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">// scrolling delta and update offset</span></span>
<span class="line"><span style="color:#A6ACCD;">                state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rememberScrollableState</span><span style="color:#A6ACCD;"> { delta </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    offset </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> delta</span></span>
<span class="line"><span style="color:#A6ACCD;">                    delta</span></span>
<span class="line"><span style="color:#A6ACCD;">                }</span></span>
<span class="line"><span style="color:#A6ACCD;">            )</span></span>
<span class="line"><span style="color:#A6ACCD;">            .</span><span style="color:#82AAFF;">background</span><span style="color:#A6ACCD;">(Color.LightGray),</span></span>
<span class="line"><span style="color:#A6ACCD;">        contentAlignment </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Alignment.Center</span></span>
<span class="line"><span style="color:#A6ACCD;">    ) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">Text</span><span style="color:#A6ACCD;">(offset.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p><img src="https://developer.android.google.cn/images/jetpack/compose/gestures-numeric-offset.gif" alt="一种用于检测手指按下手势并显示手指位置数值的界面元素"></p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">@Composable</span></span>
<span class="line"><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SwipeableSample</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> width </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">96</span><span style="color:#A6ACCD;">.dp</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> squareSize </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">48</span><span style="color:#A6ACCD;">.dp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> swipeableState </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rememberSwipeableState</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> sizePx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">with</span><span style="color:#A6ACCD;">(LocalDensity.current) { squareSize.</span><span style="color:#82AAFF;">toPx</span><span style="color:#A6ACCD;">() }</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> anchors </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mapOf</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0f</span><span style="color:#A6ACCD;"> to </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">, sizePx to </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// Maps anchor points (in px) to states</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Box</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        modifier </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Modifier</span></span>
<span class="line"><span style="color:#A6ACCD;">            .</span><span style="color:#82AAFF;">width</span><span style="color:#A6ACCD;">(width)</span></span>
<span class="line"><span style="color:#A6ACCD;">            .</span><span style="color:#82AAFF;">swipeable</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> swipeableState,</span></span>
<span class="line"><span style="color:#A6ACCD;">                anchors </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> anchors,</span></span>
<span class="line"><span style="color:#A6ACCD;">                thresholds </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> { _, _ </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">&gt; </span><span style="color:#82AAFF;">FractionalThreshold</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.3f</span><span style="color:#A6ACCD;">) },</span></span>
<span class="line"><span style="color:#A6ACCD;">                orientation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Orientation.Horizontal</span></span>
<span class="line"><span style="color:#A6ACCD;">            )</span></span>
<span class="line"><span style="color:#A6ACCD;">            .</span><span style="color:#82AAFF;">background</span><span style="color:#A6ACCD;">(Color.LightGray)</span></span>
<span class="line"><span style="color:#A6ACCD;">    ) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">Box</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            Modifier</span></span>
<span class="line"><span style="color:#A6ACCD;">                .</span><span style="color:#82AAFF;">offset</span><span style="color:#A6ACCD;"> { </span><span style="color:#82AAFF;">IntOffset</span><span style="color:#A6ACCD;">(swipeableState.offset.</span><span style="color:#C792EA;">value</span><span style="color:#A6ACCD;">.</span><span style="color:#82AAFF;">roundToInt</span><span style="color:#A6ACCD;">(), </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) }</span></span>
<span class="line"><span style="color:#A6ACCD;">                .</span><span style="color:#82AAFF;">size</span><span style="color:#A6ACCD;">(squareSize)</span></span>
<span class="line"><span style="color:#A6ACCD;">                .</span><span style="color:#82AAFF;">background</span><span style="color:#A6ACCD;">(Color.DarkGray)</span></span>
<span class="line"><span style="color:#A6ACCD;">        )</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p><img src="https://developer.android.google.cn/images/jetpack/compose/gestures-swipe.gif" alt="响应滑动手势的界面元素"></p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">@Composable</span></span>
<span class="line"><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TransformableSample</span><span style="color:#A6ACCD;">() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// set up all transformation states</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> scale </span><span style="color:#C792EA;">by</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">remember</span><span style="color:#A6ACCD;"> { </span><span style="color:#82AAFF;">mutableStateOf</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1f</span><span style="color:#A6ACCD;">) }</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> rotation </span><span style="color:#C792EA;">by</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">remember</span><span style="color:#A6ACCD;"> { </span><span style="color:#82AAFF;">mutableStateOf</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0f</span><span style="color:#A6ACCD;">) }</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> offset </span><span style="color:#C792EA;">by</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">remember</span><span style="color:#A6ACCD;"> { </span><span style="color:#82AAFF;">mutableStateOf</span><span style="color:#A6ACCD;">(Offset.Zero) }</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rememberTransformableState</span><span style="color:#A6ACCD;"> { zoomChange, offsetChange, rotationChange </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        scale </span><span style="color:#89DDFF;">*=</span><span style="color:#A6ACCD;"> zoomChange</span></span>
<span class="line"><span style="color:#A6ACCD;">        rotation </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> rotationChange</span></span>
<span class="line"><span style="color:#A6ACCD;">        offset </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> offsetChange</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Box</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        Modifier</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// apply other transformations like rotation and zoom</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// on the pizza slice emoji</span></span>
<span class="line"><span style="color:#A6ACCD;">            .</span><span style="color:#82AAFF;">graphicsLayer</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                scaleX </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> scale,</span></span>
<span class="line"><span style="color:#A6ACCD;">                scaleY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> scale,</span></span>
<span class="line"><span style="color:#A6ACCD;">                rotationZ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> rotation,</span></span>
<span class="line"><span style="color:#A6ACCD;">                translationX </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> offset.x,</span></span>
<span class="line"><span style="color:#A6ACCD;">                translationY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> offset.y</span></span>
<span class="line"><span style="color:#A6ACCD;">            )</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// add transformable to listen to multitouch transformation events</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// after offset</span></span>
<span class="line"><span style="color:#A6ACCD;">            .</span><span style="color:#82AAFF;">transformable</span><span style="color:#A6ACCD;">(state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> state)</span></span>
<span class="line"><span style="color:#A6ACCD;">            .</span><span style="color:#82AAFF;">background</span><span style="color:#A6ACCD;">(Color.Blue)</span></span>
<span class="line"><span style="color:#A6ACCD;">            .</span><span style="color:#82AAFF;">fillMaxSize</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    )</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p><img src="https://developer.android.google.cn/images/jetpack/compose/gestures-multitouch.gif" alt="响应多点触控手势（平移、缩放和旋转）的界面元素"></p></li><li><p>已知的库</p><ol><li>图片加载<a href="https://coil-kt.github.io/coil/compose/" target="_blank" rel="noreferrer">Cil 库</a></li><li>导航 Navigation</li></ol></li><li><p>获取资源文件中的内容： <code>stringResource</code>， <code>dimensionResource</code>， <code>colorResource</code>， <code>painterResource</code>， <code>animatedVectorResource</code></p></li></ol>`,5),e=[p];function t(c,A,r,C,y,i){return n(),a("div",null,e)}const F=s(o,[["render",t]]);export{d as __pageData,F as default};
