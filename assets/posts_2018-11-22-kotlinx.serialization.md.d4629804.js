import{_ as s,o as a,c as n,U as l}from"./chunks/framework.70292381.js";const F=JSON.parse('{"title":"kotlinx.serialization","description":"","frontmatter":{"title":"kotlinx.serialization","date":"2018-11-22T12:00:00.000Z","categories":["Kotlin"],"tags":["Serialization"]},"headers":[],"relativePath":"posts/2018-11-22-kotlinx.serialization.md","filePath":"posts/2018-11-22-kotlinx.serialization.md"}'),o={name:"posts/2018-11-22-kotlinx.serialization.md"},p=l(`<p>kotlin 的官方序列化库，通过自动生成代码来避免反射。只需要在 kotlin 类上标记 <code>@serializable</code>注解就可以，内置标准集合的序列化方法。 支持 JSON，CBOR， Protobuf格式</p><h3 id="提供的注解" tabindex="-1">提供的注解 <a class="header-anchor" href="#提供的注解" aria-label="Permalink to &quot;提供的注解&quot;">​</a></h3><ol><li><code>@Serializable</code> 注解 用于标记kotlin的类，为类生成序列化<code>serializer</code>方法。</li><li><code>@Optional</code>注解 用于标记属性参数，被标记的属性需要提供默认数据。可选参数，如果序列化数据中有就使用数据提供的，没用就使用默认的</li><li><code>@Serialname</code>注解 用于标记属性参数，重新定义序列化时的参数名</li><li><code>@Transient</code>注解 用于标记属性参数， 被标记的参数不参与序列化</li></ol><h3 id="json-参数" tabindex="-1">JSON 参数 <a class="header-anchor" href="#json-参数" aria-label="Permalink to &quot;JSON 参数&quot;">​</a></h3><p>JSON 类的定义：</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JSON</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> unquoted: </span><span style="color:#FFCB6B;">Boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> indented: </span><span style="color:#FFCB6B;">Boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> indent: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;    &quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">internal</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> strictMode: </span><span style="color:#FFCB6B;">Boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> updateMode: </span><span style="color:#FFCB6B;">UpdateMode</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> UpdateMode.OVERWRITE,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> encodeDefaults: </span><span style="color:#FFCB6B;">Boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">): ......</span></span></code></pre></div><ol><li>unquoted 参数： 无引号模式，无符号模式下 序列化过程中key值和value值是没有引号包围的如：<code>&quot;{a:1}&quot;</code>[一般用于测试]</li><li>indented 是否缩进： 用于多行 JSON 输出模式</li><li>indent 缩进字符： 换行缩进字符</li><li>strictMode 参数： 严格模式下， JSON 转化过程不允许有类中没有规定的key值，类序列化过程不允许 NaN 和 无尽浮点数</li><li>updateMode 参数： 更新模式[针对集合]，<code>BANNED</code> 禁止出现重复，<code>OVERWRITE</code> 覆盖数据，<code>UPDATE</code> 合并</li></ol><p>内置对象 <code>JSON.plain</code>， <code>JSON.indented</code>， <code>JSON.nonstrict</code> ，<code>JSON.unquoted</code></p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> plain </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">JSON</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> unquoted </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">JSON</span><span style="color:#A6ACCD;">(unquoted </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> indented </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">JSON</span><span style="color:#A6ACCD;">(indented </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> nonstrict </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">JSON</span><span style="color:#A6ACCD;">(strictMode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h3><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">kotlinx.serialization.Optional</span></span>
<span class="line"><span style="color:#C792EA;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">kotlinx.serialization.SerialName</span></span>
<span class="line"><span style="color:#C792EA;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">kotlinx.serialization.Serializable</span></span>
<span class="line"><span style="color:#C792EA;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">kotlinx.serialization.Transient</span></span>
<span class="line"><span style="color:#C792EA;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">kotlinx.serialization.json.JSON</span></span>
<span class="line"><span style="color:#C792EA;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">kotlinx.serialization.list</span></span>
<span class="line"><span style="color:#C792EA;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">org.junit.Test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SerializeTest</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">@Serializable</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Data</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> a: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">@Optional</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> b: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;er&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">@Transient</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> c: </span><span style="color:#FFCB6B;">Int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">@SerialName</span><span style="color:#A6ACCD;">(</span><span style="color:#C3E88D;">&quot;d&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> dd: </span><span style="color:#FFCB6B;">Float</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7.1f</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">@Test</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testSerialize</span><span style="color:#A6ACCD;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.</span><span style="color:#82AAFF;">println</span><span style="color:#A6ACCD;">(JSON.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(Data.</span><span style="color:#82AAFF;">serializer</span><span style="color:#A6ACCD;">(), </span><span style="color:#82AAFF;">Data</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">42</span><span style="color:#A6ACCD;">)))</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.</span><span style="color:#82AAFF;">println</span><span style="color:#A6ACCD;">(JSON.indented.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(Data.</span><span style="color:#82AAFF;">serializer</span><span style="color:#A6ACCD;">().list, </span><span style="color:#82AAFF;">listOf</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Data</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">42</span><span style="color:#A6ACCD;">))))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSON.unquoted.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(Data.</span><span style="color:#82AAFF;">serializer</span><span style="color:#A6ACCD;">(), </span><span style="color:#C3E88D;">&quot;{a:2, d: 3.4}&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.</span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(obj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    {&quot;a&quot;:42,&quot;b&quot;:&quot;er&quot;,&quot;d&quot;:7.1}  // 默认格式</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            &quot;a&quot;: 42,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            &quot;b&quot;: &quot;er&quot;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            &quot;d&quot;: 7.1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    ]// 缩进格式</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Data(a=2, b=er, c=5, dd=3.4)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div>`,11),e=[p];function t(c,r,C,A,i,y){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
