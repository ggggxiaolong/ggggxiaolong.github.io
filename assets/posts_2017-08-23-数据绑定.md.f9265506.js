import{_ as s,o as a,c as n,U as l}from"./chunks/framework.70292381.js";const d=JSON.parse('{"title":"Android数据绑定","description":"","frontmatter":{"title":"Android数据绑定","date":"2017-08-23T12:00:00.000Z","categories":["Android"],"tags":["DataBinding"]},"headers":[],"relativePath":"posts/2017-08-23-数据绑定.md","filePath":"posts/2017-08-23-数据绑定.md"}'),o={name:"posts/2017-08-23-数据绑定.md"},p=l(`<blockquote><p>2017.8.15 初次添加 017.12.20 更新BindingMethod注解</p></blockquote><p>如果你是第一次使用强烈推荐你去读这几篇文章</p><ul><li><a href="http://blog.csdn.net/yzy1226466341/article/details/68066451" target="_blank" rel="noreferrer">Android databinding(初识)</a></li><li><a href="http://blog.csdn.net/yzy1226466341/article/details/68946087" target="_blank" rel="noreferrer">Android databinding详解(一)--layout解析</a></li><li><a href="http://blog.csdn.net/yzy1226466341/article/details/69228661" target="_blank" rel="noreferrer">Android databinding详解(二)--activity解析</a></li><li><a href="http://blog.csdn.net/yzy1226466341/article/details/72622486" target="_blank" rel="noreferrer">Android databinding(详解三)--自定义属性使用</a></li><li><a href="http://blog.csdn.net/yzy1226466341/article/details/72624869" target="_blank" rel="noreferrer">Android databinding(四)--layout中的特殊使用</a></li><li><a href="http://blog.csdn.net/yzy1226466341/article/details/67634263" target="_blank" rel="noreferrer">Xml文件必须转义的字符</a></li></ul><p>官方数据绑定库的翻译 <strong>和原文有所不同是按照我的理解翻译的</strong><a href="https://developer.android.com/topic/libraries/data-binding/index.htm" target="_blank" rel="noreferrer">https://developer.android.com/topic/libraries/data-binding/index.htm</a></p><h1 id="数据绑定库" tabindex="-1">数据绑定库 <a class="header-anchor" href="#数据绑定库" aria-label="Permalink to &quot;数据绑定库&quot;">​</a></h1><p>这篇文档介绍了如何使用Data Binging库写声明式的布局，使用最少的胶水代码将业务逻辑和界面绑定在一起。</p><p>这个Data Binding库具有灵活性和高兼容性的特点--它是一个support库，你可以在不低于安卓2.1版本（API level 7+）上使用。</p><h2 id="构建环境" tabindex="-1">构建环境 <a class="header-anchor" href="#构建环境" aria-label="Permalink to &quot;构建环境&quot;">​</a></h2><p>使用安卓 SDK manager 从 Support 库下载 Data Binging ，并在 app 模块下的<code>build.gradle</code>文件中添加dataBinding的配置文件。 使用下面的代码片段配置data binding:</p><div class="language-groovy"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">android {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">....</span></span>
<span class="line"><span style="color:#A6ACCD;">    dataBinding {</span></span>
<span class="line"><span style="color:#A6ACCD;">        enabled </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>* 即使你的app模块依赖的库使用了data binding，你也需要在app模块的<code>build.gradle</code>文件中添加data binding的配置。 同样的你也需要使用不低于 Android Studio1.3 的 Android Studio 版本，提供了对data binding的支持。</p><h2 id="data-binding-布局文件" tabindex="-1">Data Binding 布局文件 <a class="header-anchor" href="#data-binding-布局文件" aria-label="Permalink to &quot;Data Binding 布局文件&quot;">​</a></h2><h4 id="第一个data-binding表达式" tabindex="-1">第一个data binding表达式 <a class="header-anchor" href="#第一个data-binding表达式" aria-label="Permalink to &quot;第一个data binding表达式&quot;">​</a></h4><p>data binding的布局文件和普通的布局文件有一点不同，它的根布局是<code>&lt;layout&gt;</code>在根布局下面跟一个<code>&lt;data&gt;</code>元素和一个view的布局元素。下面是一个简单的示例。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#F07178;">xml</span><span style="color:#C792EA;"> version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> encoding</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">layout</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">xmlns</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://schemas.android.com/apk/res/android</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">LinearLayout</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">orientation</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vertical</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">match_parent</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">match_parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{user.firstName}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{user.lastName}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">LinearLayout</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">layout</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>在 data 标签 variable 中声明的 user 可能作为一个属性使用到布局文件中</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><p>布局中的表达式需要写在<code>@{}</code>语法中，下面的示例中演示了如何将 user 的 firstName 作为 TextView 的文本：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{user.firstName}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><h2 id="数据对象" tabindex="-1">数据对象 <a class="header-anchor" href="#数据对象" aria-label="Permalink to &quot;数据对象&quot;">​</a></h2><p>假设你的User POJO的对象是这样：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> firstName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> lastName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">firstName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">lastName</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">firstName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> firstName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">lastName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> lastName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这是一个不可变对象。 这个对象一旦生成就不能改变，当然它也可以是这样：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> firstName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> lastName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">firstName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">lastName</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">firstName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> firstName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">lastName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> lastName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getFirstName</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">firstName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getLastName</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">lastName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>对data binding来说这两个类是同等的。在 TextView 的 text 上使用的表达式<code>@{user.firstName}</code>会访问前一个对象的 firstName 属性，访问后一个对象的 getFirstName() 方法。实际上如果<code>firstName()</code>存在的话它也会被解析成 firstName() 方法。</p><h2 id="绑定数据" tabindex="-1">绑定数据 <a class="header-anchor" href="#绑定数据" aria-label="Permalink to &quot;绑定数据&quot;">​</a></h2><p>默认情况会生成一个 Bingding 类，这个类会根据布局文件生成一个PascalCase命名方式（首字母大写）以“Binding”为后缀的名字。上面布局文件的名字是<code>main_activity.xml</code>所以生成的类为<code>MainActivityBinding</code>。这个类包含了所有的视图数据（例如<code>user</code>变量）到视图的 binding ，并且知道怎么从 binding 表达式取值设置到 View。 创建 binding 的最简单的方式是在 inflating 的时候:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onCreate</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Bundle</span><span style="color:#A6ACCD;"> savedInstanceState</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   super</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onCreate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">savedInstanceState</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">MainActivityBinding</span><span style="color:#A6ACCD;"> binding </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> DataBindingUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setContentView</span><span style="color:#89DDFF;">(this,</span><span style="color:#A6ACCD;"> R</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">layout</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">main_activity</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">   binding</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setUser</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>完成！运行这个应用，你将在UI界面上看到Test User。另外你可以通过你也可以通过这种方式获取：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">MainActivityBinding</span><span style="color:#A6ACCD;"> binding </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MainActivityBinding</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inflate</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">getLayoutInflater</span><span style="color:#89DDFF;">());</span></span></code></pre></div><p>如果你在 ListView 或者 RecyclerView 的 adapter 内部使用 data binding，你可以这样使用:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">ListItemBinding</span><span style="color:#A6ACCD;"> binding </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ListItemBinding</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inflate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">layoutInflater</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> viewGroup</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//or</span></span>
<span class="line"><span style="color:#C792EA;">ListItemBinding</span><span style="color:#A6ACCD;"> binding </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> DataBindingUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inflate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">layoutInflater</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> R</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">layout</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">list_item</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> viewGroup</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false);</span></span></code></pre></div><h2 id="事件处理" tabindex="-1">事件处理 <a class="header-anchor" href="#事件处理" aria-label="Permalink to &quot;事件处理&quot;">​</a></h2><p>Data binding 允许你使用表达是处理 View 的事件（例如 OnClick）。 事件属性的名字和监听事件方法相关但是有一点区别。例如，<code>View.OnLongClickListener</code> 接口有一个方法 <code>onLongClick()</code> ，所以这个事件的属性名为 <code>android:onLongClick</code> 。这里有两种处理事件的方式：</p><ul><li>方法引用： 在布局文件的表达式中添加处理监听事件的方法的签名。当表达式检测为一个方法引用，Data binding 将会把这个方法引用和它的所属对象包装进一个 listener，并将这个 listener 设置到目标View。如果表达式检测为null， Data Binding 将什么也不做。</li><li>监听绑定：使用 lambda 表达式处理事件，Data Binding会创建一个 listener 设置到目标 View。当事件触发的时候会调用这个 lambda 表达式。</li></ul><h2 id="方法引用" tabindex="-1">方法引用 <a class="header-anchor" href="#方法引用" aria-label="Permalink to &quot;方法引用&quot;">​</a></h2><p>事件会直接调用处理方法，就像<code>android:onclick</code>会调用对应Activity的方法一样。和<code>View#onClick</code>相比表达式会在编译器被处理，所以方法不存在或者方法签名书写错误可以在编译器发现。</p><p>和 事件绑定 相比 方法引用 的主要区别是 listener 的实现在数据绑定的时候就生成，而不是事件触发的时候。如果你更倾向于在事件触发的时候调用表达式你应该使用事件绑定。</p><p>需要生成一个处理事件的对象，像下面这样</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyHandlers</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onClickFriend</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">View</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">view</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>然后将它绑定到对应的View的点击事件上：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#F07178;">xml</span><span style="color:#C792EA;"> version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> encoding</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">layout</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">xmlns</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://schemas.android.com/apk/res/android</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">handlers</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.MyHandlers</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> typjavatch_parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">       &lt;TextView android:layout_width=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#C3E88D;">           android:layout_height=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#C3E88D;">           android:text=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">@{user.firstName}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#C3E88D;">           android:onClick=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">@{handlers::onClickFriend}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">   &lt;/LinearLayout&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">&lt;/layout&gt;</span></span></code></pre></div><p>* 注意点击事件的方法签名必须和处理事件对象的方法签名一致</p><h2 id="事件绑定" tabindex="-1">事件绑定 <a class="header-anchor" href="#事件绑定" aria-label="Permalink to &quot;事件绑定&quot;">​</a></h2><p>事件绑定是将表达式在运行时与事件绑定，和方法引用类似，但是有更灵活的表达方式。这个特性需要在安卓Gradle插件2.0+上才能使用。</p><p>使用方法引用，方法的参数必须和事件listener的参数相同。使用事件绑定，你的方法返回值必须和事件需要的返回值相同（Void返回值除外）。例如你有一个 presenter 类，它有如下的方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Presenter</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onSaveClick</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">task</span><span style="color:#89DDFF;">){}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>像下面这样将类与事件做绑定：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#F07178;">xml</span><span style="color:#C792EA;"> version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> encoding</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">?&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">layout</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">xmlns</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://schemas.android.com/apk/res/android</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">task</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.android.example.Task</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">presenter</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.android.example.Presenter</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">LinearLayout</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">match_parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">match_parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{() -&gt; presenter.onSaveClick(task)}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">LinearLayout</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">layout</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>listener 被替换成了 lambda 表达式，但是 lambda 只能在表达式的根元素使用。当使用表达式代替回调时，Data Binding 会为这个事件创建所需的 listener 和 register 。当 View 触发事件的时候 Data Binding 会检查所写的表达式。</p><blockquote><p>As in regular binding expressions, you still get the null and thread safety of Data Binding while these listener expressions are being evaluated. (这句话没理解，好像是说检查表达式的时候是空安全而且线程安全的)</p></blockquote><p>* 注意下面的例子中，没有将<code>onclick(android.view.View)</code>传过来的<code>view</code>添加到<code>onsaveClick()</code>参数中。事件绑定提供了两种方式来处理 listener 的参数：全部忽略或全部命名。如果你更倾向于命名这些参数，你可以将添加到表达式中，就像下面写的这样：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">android:onClick=&quot;@{(view) -&gt; presenter.onSaveClick(task)}&quot;</span></span></code></pre></div><p>如果你想在表达式中处理这些参数，你可以像下面这样：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Presenter</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onSaveClick</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">View</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">view</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">task</span><span style="color:#89DDFF;">){}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">android:onClick=&quot;@{(theView) -&gt; presenter.onSaveClick(theView, task)}&quot;</span></span></code></pre></div><p>你也可以在lambda中使用更多的参数：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Presenter</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onCompletedChanged</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">task</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">completed</span><span style="color:#89DDFF;">){}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">CheckBox</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">onCheckedChanged</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{(cb, isChecked) -&gt; presenter.completeChanged(task, isChecked)}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span></code></pre></div><p>如果你监听的事件的返回值不是<code>void</code>，表达式的返回值必须和事件的返回值一致。就像下面这样你监听的是<code>onLongClick()</code>事件，它的返回值是<code>boolean</code>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Presenter</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onLongClick</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">View</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">view</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">task</span><span style="color:#89DDFF;">){}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">android:onLongClick=&quot;@{(theView) -&gt; presenter.onLongClick(theView, task)}&quot;</span></span></code></pre></div><p>如果由于表达式的返回值为<code>null</code>对象，Data Binding 将返回默认的 java 值（引用将返回null，int 返回 0, boolean返回false 等）。 如果你使用了谓语表达式（例如三目运算），你可以使用<code>void</code>作为标识符。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">android:onClick=&quot;@{(v) -&gt; v.isVisible() ? doSomething() : void}&quot;</span></span></code></pre></div><h2 id="避免复杂的监听" tabindex="-1">避免复杂的监听 <a class="header-anchor" href="#避免复杂的监听" aria-label="Permalink to &quot;避免复杂的监听&quot;">​</a></h2><p>监听表达式是非常强大的它可以使你的代码变得易读。另外，listener 中含有复杂的表达式会使布局不易阅读和维护。表达式应该只做数据的传递，在方法的内部处理业务逻辑。 一些特殊的点击事件存在和\`android:onclick\`\`冲突的地方，需要使用下面的属性避免冲突：</p><table><thead><tr><th>Class</th><th style="text-align:center;">Listener Setter</th><th style="text-align:right;">Attribute</th></tr></thead><tbody><tr><td><a href="https://developer.android.com/reference/android/widget/SearchView.html" target="_blank" rel="noreferrer">SearchView</a></td><td style="text-align:center;">[<a href="https://developer.android.com/reference/android/widget/SearchView.html#setOnSearchClickListener(android.view.View.OnClickListener)" target="_blank" rel="noreferrer">setOnSearchClickListener(View.OnClickListener)</a>](<a href="https://developer.android.com/reference/android/widget/SearchView.html#setOnSearchClickListener(android.view.View.OnClickListener)" target="_blank" rel="noreferrer">https://developer.android.com/reference/android/widget/SearchView.html#setOnSearchClickListener(android.view.View.OnClickListener)</a>)</td><td style="text-align:right;">android:onSearchClick</td></tr><tr><td><a href="https://developer.android.com/reference/android/widget/ZoomControls.html" target="_blank" rel="noreferrer">ZoomControls</a></td><td style="text-align:center;"><a href="https://developer.android.com/reference/android/widget/ZoomControls.html#setOnZoomInClickListener(android.view.View.OnClickListener)" target="_blank" rel="noreferrer">setOnZoomInClickListener(View.OnClickListener)</a></td><td style="text-align:right;">android:onZoomIn</td></tr><tr><td><a href="https://developer.android.com/reference/android/widget/ZoomControls.html" target="_blank" rel="noreferrer">ZoomControls</a></td><td style="text-align:center;"><a href="https://developer.android.com/reference/android/widget/ZoomControls.html#setOnZoomOutClickListener(android.view.View.OnClickListener)" target="_blank" rel="noreferrer">setOnZoomOutClickListener(View.OnClickListener)</a></td><td style="text-align:right;">android:onZoomOut</td></tr></tbody></table><h2 id="布局细节" tabindex="-1">布局细节 <a class="header-anchor" href="#布局细节" aria-label="Permalink to &quot;布局细节&quot;">​</a></h2><h2 id="import-标签" tabindex="-1"><code>&lt;import&gt;</code>标签 <a class="header-anchor" href="#import-标签" aria-label="Permalink to &quot;\`&lt;import&gt;\`标签&quot;">​</a></h2><p>在<code>&lt;data&gt;</code>标签下可能存在零个或多个<code>impoert</code>标签，允许在你的布局文件中使用像<code>java</code>一样的索引。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android.view.View</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>布局文件中就可以使用这些导入的类型：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{user.lastName}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">visibility</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{user.isAdult ? View.VISIBLE : View.GONE}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><p>存在类名冲突情况下可以使用<code>alias</code>重命名：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android.view.View</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.real.estate.View</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#C792EA;">alias</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Vista</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><p>在当前的布局文件中<code>Vista</code>指向的是<code>com.example.real.estate.View</code>，View指向的是<code>android.view.View</code>。导入的类型也可以在<code>&lt;Variables&gt;</code>中使用，注意<code>&lt;&gt;</code>需要替换成<code>&amp;lt; &amp;gt;</code></p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">java.util.List</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">userList</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">List</span><span style="color:#89DDFF;">&amp;</span><span style="color:#C3E88D;">lt</span><span style="color:#89DDFF;">;</span><span style="color:#C3E88D;">User</span><span style="color:#89DDFF;">&amp;</span><span style="color:#C3E88D;">gt</span><span style="color:#89DDFF;">;&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><blockquote><p>Android Studio 还不能处理导入信息，所以 IDE 可能在<code>&lt;variables&gt;</code>中无法使用自动补全功能。但是不影响应用编译，你也可以在<code>&lt;variables&gt;</code>中使用全限定符（fully qualified names）来解决这个问题。</p></blockquote><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{((User)(user.connection)).lastName}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><p>导入类型的静态类和静态方法也可以在表达式中使用：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.MyStringUtils</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">…</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{MyStringUtils.capitalize(user.lastName)}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><p><code>java.lang.*</code>是自动导入的。</p><h2 id="variable-标签" tabindex="-1"><code>&lt;Variable&gt;</code>标签 <a class="header-anchor" href="#variable-标签" aria-label="Permalink to &quot;\`&lt;Variable&gt;\`标签&quot;">​</a></h2><p>在<code>&lt;data&gt;</code>标签下可以有任意数量的<code>&lt;variable&gt;</code>标签。每个<code>&lt;variable&gt;</code>标签描述的属性都可以在布局文件的表达式中使用。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android.graphics.drawable.Drawable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">image</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Drawable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">note</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">String</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>变量的类型在编译期被检查，所以如果变量是 <a href="https://developer.android.com/reference/android/databinding/Observable.html" target="_blank" rel="noreferrer">Observable</a> 的实现类或者是一个 <a href="https://developer.android.com/topic/libraries/data-binding/index.html#observable_collections" target="_blank" rel="noreferrer">observable collection</a> 它就会在变量改变的时候被通知到。</p><p>因为配置（例如横竖屏）问题而创建的不同布局文件中的声明的<code>&lt;variable&gt;</code>变量会被组合在一起。所以这些布局文件中声明的变量不能存在冲突。</p><p>生成的 binding 类会为每个声明的变量生成 getter 和 setter 方法，这些变量在调用 setter 之前保存的是 java 默认值。</p><p>如果表达式的使用到<code>context</code>，就会生成一个特殊（隐式）的<code>context</code>变量， 这个 <code>context</code>变量从 root View 的<code>getContext()</code>获取的。如果<code>context</code>被显式声明那么这个隐式<code>context</code>会被覆盖。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{context.getPackageName()}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><h2 id="自定义-binding-的类名" tabindex="-1">自定义 Binding 的类名 <a class="header-anchor" href="#自定义-binding-的类名" aria-label="Permalink to &quot;自定义 Binding 的类名&quot;">​</a></h2><p>默认情况下 Binding 的类名是根据布局文件名生成的（首字母大写，删除下划线，以Binding结尾），这个类会被放在module的包名下的<code>databinding</code>文件夹下面。举个例子，如果你的布局文件名是<code>contact_item.xml</code>那么生成的 Binding 类名就为<code>ContactItemBinding</code>。如果module的包名是<code>com.example.my.app</code>那么这个 Binding 类就会被放在<code>com.example.my.app.databinding</code>文件夹下。</p><p>Binding 类名也可以被重新定义，只需要修改<code>&lt;data&gt;</code> 标签的 <code>class</code> 属性，就像下面这样：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ContactItem</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>这样就会在 module 包文件下面的 databinding 文件夹下面生成一个 binding 类，这个类名为<code>ContactItem</code>。如果你想将 binding 类生成在 module 包文件的相对路径下（而不是databinding文件），你需要添加“.”前缀像下面这样。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.ContactItem</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>这样<code>ContactItem</code>就会被放在module的包名文件夹下。当然你也可以使用完整的包名来控制binding的位置：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.ContactItem</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="view视图下面的include标签" tabindex="-1">View视图下面的include标签 <a class="header-anchor" href="#view视图下面的include标签" aria-label="Permalink to &quot;View视图下面的include标签&quot;">​</a></h2><p><code>&lt;data&gt;</code>中声明的变量可以通过View视图中的include标签传递给它的子视图，需要在布局文件中声明应用命名空间（<code>xmlns:bind=&quot;http://schemas.android.com/apk/res-auto&quot;</code>），在传值时使用变量名<code>bind:user</code>。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#F07178;">xml</span><span style="color:#C792EA;"> version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> encoding</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">layout</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">xmlns</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://schemas.android.com/apk/res/android</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#C792EA;">xmlns</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://schemas.android.com/apk/res-auto</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">LinearLayout</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">orientation</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vertical</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">match_parent</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">match_parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">include</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">layout</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@layout/name</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#C792EA;">bind</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">user</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{user}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">include</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">layout</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@layout/contact</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#C792EA;">bind</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">user</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{user}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">LinearLayout</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">layout</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>* 注意 在 name.xml 和 contact.xml 文件中也需要声明 <code>user</code> 变量。 Data binding 不支持 <code>&lt;mege&gt; </code>标签的直接子标签中使用 <code>&lt;include&gt;</code> 就像下面这样：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#F07178;">xml</span><span style="color:#C792EA;"> version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> encoding</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">layout</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">xmlns</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://schemas.android.com/apk/res/android</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#C792EA;">xmlns</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://schemas.android.com/apk/res-auto</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">merge</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">include</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">layout</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@layout/name</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#C792EA;">bind</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">user</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{user}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">include</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">layout</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@layout/contact</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#C792EA;">bind</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">user</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{user}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">merge</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">layout</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="表达式语言" tabindex="-1">表达式语言 <a class="header-anchor" href="#表达式语言" aria-label="Permalink to &quot;表达式语言&quot;">​</a></h2><h5 id="通用特性" tabindex="-1">通用特性 <a class="header-anchor" href="#通用特性" aria-label="Permalink to &quot;通用特性&quot;">​</a></h5><p>表达式语言和java语法很类似，这些是他们相同的地方：</p><ul><li>数学运算 + - / * %</li><li>字符串连接 +</li><li>逻辑运算 &amp;&amp; ||</li><li>二进制运算 &amp; | ^</li><li>一元运算 + - ! ~</li><li>左移右移 &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li><li>比较运算 == &gt; &lt; &gt;= &lt;=</li><li>instanceof</li><li>括号 ()</li><li>Literals - character, String, numeric, null</li><li>强制转换</li><li>方法调用</li><li>属性访问</li><li>数组访问 []</li><li>三目运算 ?:</li></ul><p>例如：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">android:text=&quot;@{String.valueOf(index + 1)}&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">android:visibility=&quot;@{age &lt; 13 ? View.GONE : View.VISIBLE}&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">android:transitionName=&#39;@{&quot;image_&quot; + id}&#39;</span></span></code></pre></div><h5 id="不支持的语法" tabindex="-1">不支持的语法 <a class="header-anchor" href="#不支持的语法" aria-label="Permalink to &quot;不支持的语法&quot;">​</a></h5><p>java 语法中的一些操作符是不支持的</p><ul><li>this</li><li>supper</li><li>new</li><li>显式泛型</li></ul><h5 id="空聚合运算符" tabindex="-1">空聚合运算符 <a class="header-anchor" href="#空聚合运算符" aria-label="Permalink to &quot;空聚合运算符&quot;">​</a></h5><p>空聚合运算符（??）在左面表达式不为空的情况下会取左边的表达式的值否则会选择右边的表达式的值</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">android:text=&quot;@{user.displayName ?? user.lastName}&quot;</span></span></code></pre></div><p>它等同于下面的表达式</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">android:text=&quot;@{user.displayName != null ? user.displayName : user.lastName}&quot;</span></span></code></pre></div><h5 id="属性引用" tabindex="-1">属性引用 <a class="header-anchor" href="#属性引用" aria-label="Permalink to &quot;属性引用&quot;">​</a></h5><p>上面的内容已经讨论过了：它是 JavaBean 的一种简短引用方式。当在表达式中使用了一个类的属性引用，就会从相同格式的属性， getter 方法和 ObservableFilds 中取值。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">android:text=&quot;@{user.lastName}&quot;</span></span></code></pre></div><h5 id="避免空异常" tabindex="-1">避免空异常 <a class="header-anchor" href="#避免空异常" aria-label="Permalink to &quot;避免空异常&quot;">​</a></h5><p>自动生成的 data binding 代码会检查空和空指针异常。例如：在<code>@{user.name}</code>中如果<code>user</code>为空，<code>user.name</code>会被设置为它的默认值（null）。如果你使用<code>user.age</code>并且<code>age</code>的类型是<code>int</code>那它会被设置成默认的0。</p><h5 id="集合" tabindex="-1">集合 <a class="header-anchor" href="#集合" aria-label="Permalink to &quot;集合&quot;">​</a></h5><p>通用的集合类型： arrays, lists, sparse lists, 和 maps, 可以使用<code>[ ]</code>操作符来调用其中的值。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android.util.SparseArray</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">java.util.Map</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">java.util.List</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">list</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">List&lt;String&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sparse</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SparseArray&lt;String&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">map</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Map&lt;String, String&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">String</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">…</span></span>
<span class="line"><span style="color:#A6ACCD;">android:text=&quot;@{list[index]}&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">…</span></span>
<span class="line"><span style="color:#A6ACCD;">android:text=&quot;@{sparse[index]}&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">…</span></span>
<span class="line"><span style="color:#A6ACCD;">android:text=&quot;@{map[key]}&quot;</span></span></code></pre></div><h5 id="字符串的字面值" tabindex="-1">字符串的字面值 <a class="header-anchor" href="#字符串的字面值" aria-label="Permalink to &quot;字符串的字面值&quot;">​</a></h5><p>如果你想在表达式中使用字符串的字面值可以在外层使用单引号，字符串使用双引号。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">android:text=&#39;@{map[&quot;firstName&quot;]}&#39;</span></span></code></pre></div><p>也可以在外层使用双引号内曾使用单引号或者back quote (\`)[tab键上面的那个键]</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">android:text=&quot;@{map[\`firstName\`}&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">android:text=&quot;@{map[&#39;firstName&#39;]}&quot;</span></span></code></pre></div><h5 id="使用资源文件" tabindex="-1">使用资源文件 <a class="header-anchor" href="#使用资源文件" aria-label="Permalink to &quot;使用资源文件&quot;">​</a></h5><p>可以在表达式中使用正常的语法访问资源文件中的值：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">android:padding=&quot;@{large? @dimen/largePadding : @dimen/smallPadding}&quot;</span></span></code></pre></div><p>资源文件中的数字和字符的格式化可以通过参数传递给表达式：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">android:text=&quot;@{@string/nameFormat(firstName, lastName)}&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">android:text=&quot;@{@plurals/banana(bananaCount)}&quot;</span></span></code></pre></div><p>当数字格式化需要多个参数时所有的参数都需要传入[没理解什么意思，上面的示例中已经包含多个参数]：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Have an orange</span></span>
<span class="line"><span style="color:#A6ACCD;">  Have %d oranges</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;</span></span>
<span class="line"><span style="color:#A6ACCD;">android:text=&quot;@{@plurals/orange(orangeCount, orangeCount)}&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">/&gt;</span></span></code></pre></div><p>一些资源需要特定的类型[这里也没有看懂]：</p><table><thead><tr><th>Type</th><th>Normal Reference</th><th>Expression Reference</th></tr></thead><tbody><tr><td>String[]</td><td>@array</td><td>@stringArray</td></tr><tr><td>int[]</td><td>@array</td><td>@intArray</td></tr><tr><td>TypedArray</td><td>@array</td><td>@typedArray</td></tr><tr><td>Animator</td><td>@animator</td><td>@animator</td></tr><tr><td>StateListAnimator</td><td>@animator</td><td>@stateListAnimator</td></tr><tr><td>color int</td><td>@color</td><td>@color</td></tr><tr><td>ColorStateList</td><td>@color</td><td>@colorStateList</td></tr></tbody></table><h1 id="数据对象-1" tabindex="-1">数据对象 <a class="header-anchor" href="#数据对象-1" aria-label="Permalink to &quot;数据对象&quot;">​</a></h1><hr><p>任何的（POJO）Java 对象都可以在 data binding 中使用，但是修改相应的 POJO 并不会更新对应的 UI 视图。而 data bingding 可以给你的数据对象在数据改变时更新 UI 的能力。有三种数据改变的更新机制：Observable objects, Observable fields, 和 Observable collections。</p><p>当使用上面方法中的任意一种方式集成到 data binding 这个数据就有了自动更新 UI 的能力。</p><h2 id="observable-objects" tabindex="-1">Observable Objects <a class="header-anchor" href="#observable-objects" aria-label="Permalink to &quot;Observable Objects&quot;">​</a></h2><p>实现 <a href="https://developer.android.com/reference/android/databinding/Observable.html" target="_blank" rel="noreferrer">Observable</a> 接口的类，binding 将会为这个类创建一个 listener 来监听这个类中所有属性的改变。</p><p><a href="https://developer.android.com/reference/android/databinding/Observable.html" target="_blank" rel="noreferrer">Observable</a>接口提供了一个机制来添加 删除 listeners， 但是是否通知取决于开发者。为了简化开发，可以通过继承 <a href="https://developer.android.com/reference/android/databinding/BaseObservable.html" target="_blank" rel="noreferrer">BaseObservable</a>这个基类，它实现了 listener 的注册机制。子类负责在属性改变的时候发送通知。需要在getter方法中添加<a href="https://developer.android.com/reference/android/databinding/Bindable.html" target="_blank" rel="noreferrer">Bindable</a>注解，在setter方法中发送通知。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BaseObservable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> firstName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> lastName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bindable</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getFirstName</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">firstName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bindable</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getLastName</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">lastName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setFirstName</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">firstName</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">firstName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> firstName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#82AAFF;">notifyPropertyChanged</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">BR</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">firstName</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setLastName</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">lastName</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">lastName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> lastName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#82AAFF;">notifyPropertyChanged</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">BR</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">lastName</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><a href="https://developer.android.com/reference/android/databinding/Bindable.html" target="_blank" rel="noreferrer">Bindable</a> 注解在编译过程中会生成一个BR class 文件，这个文件会被放在 module 包下。 如果你的数据类继承了其他的类，可以将<a href="https://developer.android.com/reference/android/databinding/Observable.html" target="_blank" rel="noreferrer">Observable</a>的接口交给<a href="https://developer.android.com/reference/android/databinding/PropertyChangeRegistry.html" target="_blank" rel="noreferrer">PropertyChangeRegistry</a>处理，它集成起来很方便，而且可以高效的存储和通知listeners。</p><h2 id="observablefields" tabindex="-1">ObservableFields <a class="header-anchor" href="#observablefields" aria-label="Permalink to &quot;ObservableFields&quot;">​</a></h2><p>在创建<a href="https://developer.android.com/reference/android/databinding/Observable.html" target="_blank" rel="noreferrer">Observable</a>类的时候还是需要开发者自己写一些其他的代码的，所以如果你想节约时间或者只有很少的属性，你可以使用<a href="https://developer.android.com/reference/android/databinding/ObservableField.html" target="_blank" rel="noreferrer">ObservableField</a>或者 <a href="https://developer.android.com/reference/android/databinding/ObservableBoolean.html" target="_blank" rel="noreferrer">ObservableBoolean</a>, <a href="https://developer.android.com/reference/android/databinding/ObservableByte.html" target="_blank" rel="noreferrer">ObservableByte</a>, <a href="https://developer.android.com/reference/android/databinding/ObservableChar.html" target="_blank" rel="noreferrer">ObservableChar</a>, <a href="https://developer.android.com/reference/android/databinding/ObservableShort.html" target="_blank" rel="noreferrer">ObservableShort</a>,<a href="https://developer.android.com/reference/android/databinding/ObservableInt.html" target="_blank" rel="noreferrer">ObservableInt</a>, <a href="https://developer.android.com/reference/android/databinding/ObservableLong.html" target="_blank" rel="noreferrer">ObservableLong</a>, <a href="https://developer.android.com/reference/android/databinding/ObservableFloat.html" target="_blank" rel="noreferrer">ObservableFloat</a>, <a href="https://developer.android.com/reference/android/databinding/ObservableDouble.html" target="_blank" rel="noreferrer">ObservableDouble</a>, 和 <a href="https://developer.android.com/reference/android/databinding/ObservableParcelable.html" target="_blank" rel="noreferrer">ObservableParcelable</a> 。 <code>ObservableFields</code>是独用的<code>observable</code>对象，它只有一个属性。其他的对象（ObservableBoolean，ObservableByte...）可以避免访问基础类型造成的装箱拆箱。可以通过创建一个 public final 的属性来使用：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ObservableField</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> firstName </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ObservableField</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ObservableField</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> lastName </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ObservableField</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ObservableInt</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ObservableInt</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>就是这样！为了使用这个属性，可以调用它的get和set方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">firstName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Google</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">();</span></span></code></pre></div><h2 id="observable-collections" tabindex="-1">Observable Collections <a class="header-anchor" href="#observable-collections" aria-label="Permalink to &quot;Observable Collections&quot;">​</a></h2><p>一些应用使用更动态的结构是有数据。 Observable collections允许用键来访问数据，当键是引用类型的时候使用<a href="https://developer.android.com/reference/android/databinding/ObservableArrayMap.html" target="_blank" rel="noreferrer">ObservableArrayMap</a> 是很有用的，例如字符串：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">ObservableArrayMap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ObservableArrayMap</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">firstName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Google</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lastName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Inc.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">17</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>在布局文件中，这个map可以使用字符串访问：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android.databinding.ObservableMap</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ObservableMap&lt;String, Object&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">…</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@{user[&quot;lastName&quot;]}</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@{String.valueOf(1 + (Integer)user[&quot;age&quot;])}</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><p>当键是整型的时候可以使用<a href="https://developer.android.com/reference/android/databinding/ObservableArrayList.html" target="_blank" rel="noreferrer">ObservableArrayList</a></p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">ObservableArrayList</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Object</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ObservableArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Google</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Inc.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">17</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>在布局文件中，可以通过索引访问数据：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android.databinding.ObservableList</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.my.app.Fields</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ObservableList&lt;Object&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">…</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@{user[Fields.LAST_NAME]}</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@{String.valueOf(1 + (Integer)user[Fields.AGE])}</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><h1 id="生成的binding文件" tabindex="-1">生成的Binding文件 <a class="header-anchor" href="#生成的binding文件" aria-label="Permalink to &quot;生成的Binding文件&quot;">​</a></h1><hr><p>生成的 binding 类将布局文件中的View和variables连接在了一起。就像上文说的那样类的名字和包名可以自定义。所有生成的类都继承自 <a href="https://developer.android.com/reference/android/databinding/ViewDataBinding.html" target="_blank" rel="noreferrer">ViewDataBinding</a>。</p><h2 id="创建" tabindex="-1">创建 <a class="header-anchor" href="#创建" aria-label="Permalink to &quot;创建&quot;">​</a></h2><p>这个 binding 应该在 inflation 之后尽快的创建，以确保视图层次结构在与布局中的表达式绑定到视图之前不会受到干扰。和布局绑定有几种方式，通用的方式是使用 Binding 类的静态方法。inflate 方法将 inflate 视图和绑定合成一步。这里有两个方法重载，一个只需要提供<a href="https://developer.android.com/reference/android/view/LayoutInflater.html" target="_blank" rel="noreferrer">LayoutInflater</a>，另外一个还需要 <a href="https://developer.android.com/reference/android/view/ViewGroup.html" target="_blank" rel="noreferrer">ViewGroup</a> 参数：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">MyLayoutBinding</span><span style="color:#A6ACCD;"> binding </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MyLayoutBinding</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inflate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">layoutInflater</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">MyLayoutBinding</span><span style="color:#A6ACCD;"> binding </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MyLayoutBinding</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inflate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">layoutInflater</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> viewGroup</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false);</span></span></code></pre></div><p>如果布局的 inflated 使用了其他的机制，可以进行单独绑定：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">MyLayoutBinding</span><span style="color:#A6ACCD;"> binding </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MyLayoutBinding</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">viewRoot</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>一些情况下 binding 类提前不知道，在这种情况下可以通过 <a href="https://developer.android.com/reference/android/databinding/DataBindingUtil.html" target="_blank" rel="noreferrer">DataBindingUtil</a> 创建 binding 对象：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">ViewDataBinding</span><span style="color:#A6ACCD;"> binding </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> DataBindingUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inflate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">LayoutInflater</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> layoutId</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    parent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> attachToParent</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">ViewDataBinding</span><span style="color:#A6ACCD;"> binding </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> DataBindingUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bindTo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">viewRoot</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> layoutId</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h2 id="带有id的view" tabindex="-1">带有ID的View <a class="header-anchor" href="#带有id的view" aria-label="Permalink to &quot;带有ID的View&quot;">​</a></h2><p>Binding 类会为每个带有ID的view 生成名为ID的 public final 属性，Binding 类会在构造方法中会遍历一次View的层次结构以初始化这些 View 属性，这种机制在多个 View 的情况下会比findViewById快。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">layout</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">xmlns</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://schemas.android.com/apk/res/android</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">LinearLayout</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">orientation</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vertical</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">match_parent</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">match_parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{user.firstName}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@+id/firstName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{user.lastName}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@+id/lastName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">LinearLayout</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">layout</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>在 binding 类中会生成这样的属性：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TextView</span><span style="color:#A6ACCD;"> firstName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TextView</span><span style="color:#A6ACCD;"> lastName</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在使用 databingding 的情况下一般是不需要设置ID的，但是还是存在一些情况需要通过代码获取View的。</p><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p>Databinding 会为每个变量生成 getter 和 setter 方法。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">import</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android.graphics.drawable.Drawable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.example.User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">image</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Drawable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">variable</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">note</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">String</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>在binding 类中会生成如下的代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> com</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">example</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">User </span><span style="color:#82AAFF;">getUser</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setUser</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">com</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">example</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">User user</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Drawable</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getImage</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setImage</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Drawable</span><span style="color:#A6ACCD;"> image</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getNote</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setNote</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> note</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h2 id="viewstubs" tabindex="-1">ViewStubs <a class="header-anchor" href="#viewstubs" aria-label="Permalink to &quot;ViewStubs&quot;">​</a></h2><p><a href="https://developer.android.com/reference/android/view/ViewStub.html" target="_blank" rel="noreferrer">ViewStub</a> 和其他的 View 有些不同，在被设置成可见或显示的 inflate 之前是不可见的，在布局中她会通过 inflating 另外一个布局 替换自身。</p><p>在 binding 类中会生成一个 final 的 <a href="https://developer.android.com/reference/android/databinding/ViewStubProxy.html" target="_blank" rel="noreferrer">ViewStubProxy</a> 而不是<code>ViewStub</code>，开发者可以通过<code>getViewStub</code>来获取 <code>ViewStub</code>将它 inflate（ inflate 之后 getViewStub 将返回 null ）。</p><p>当 inflate 另外一个布局的时候必须建立一个新的 binding ，因此<code>ViewStubProxy</code> 必须监听 <a href="https://developer.android.com/reference/android/view/ViewStub.OnInflateListener.html" target="_blank" rel="noreferrer">ViewStub.OnInflateListener</a> ，并初始化 binding ，因为ViewStub 只能设置一个<code>OnInflateListener</code>所以<code>ViewStubProxy</code>会保存一个<code>OnInflateListener</code>（提供 set 方法）并在<code>ViewStub.OnInflateListener</code>回调中调用<code>OnInflateListener</code>。</p><h2 id="高级绑定" tabindex="-1">高级绑定 <a class="header-anchor" href="#高级绑定" aria-label="Permalink to &quot;高级绑定&quot;">​</a></h2><h5 id="动态变量" tabindex="-1">动态变量 <a class="header-anchor" href="#动态变量" aria-label="Permalink to &quot;动态变量&quot;">​</a></h5><p>有时，我们不知道具体的 binding 类。例如<a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html" target="_blank" rel="noreferrer">RecyclerView.Adapter</a>中存在多个布局文件时，我们是不知道具体的 binding 类的。但是仍然需要在onBindViewHolder(VH, int)方法中设置 binding 的变量。</p><p>在这个例子中，所有布局中都含有一个“item”变量，<code>BindingHolder</code>有一个<code>getBinding</code>方法可以返回 <a href="https://developer.android.com/reference/android/databinding/ViewDataBinding.html" target="_blank" rel="noreferrer">ViewDataBinding</a>。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onBindViewHolder</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BindingHolder</span><span style="color:#A6ACCD;"> holder</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> position</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> item </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mItems</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">   holder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBinding</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">setVariable</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">BR</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> item</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">   holder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBinding</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">executePendingBindings</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>##### 立即绑定 当一个变量或者 observable 改变的时候， binding 会在下一帧执行这些改变。这会有一些时间的间隔，如果你想立刻执行这些改变可以调用 <a href="https://developer.android.com/reference/android/databinding/ViewDataBinding.html#executePendingBindings()" target="_blank" rel="noreferrer">executePendingBindings()</a>方法。</p><h5 id="后台线程" tabindex="-1">后台线程 <a class="header-anchor" href="#后台线程" aria-label="Permalink to &quot;后台线程&quot;">​</a></h5><p>只要你的数据不是一个集合你就可以在后台线程更新这个数据，Data binding将会在UI线程更新View的状态，另外 Data binding 还会缓存这些变量和字段来避免并发问题。</p><h1 id="attribute-setters" tabindex="-1">Attribute Setters <a class="header-anchor" href="#attribute-setters" aria-label="Permalink to &quot;Attribute Setters&quot;">​</a></h1><hr><p>无论何时绑定的数据改变了，binding 类就必须调用View上的一个setter方法。data binding 框架提供了一些自定义的方法来关联属性和View上的方法。</p><h2 id="automatic-setters" tabindex="-1">Automatic Setters <a class="header-anchor" href="#automatic-setters" aria-label="Permalink to &quot;Automatic Setters&quot;">​</a></h2><p>对于一个 View 的属性，data binding 会尽力去寻找它相应的设置方法。属性的命名空间并不重要，重要的是属性的名字。例如，一个表达式设置给了 TextView 的<code>android:text</code>属性，将查找 TextView 的 setText(String)。如果表达式返回一个整型值则会查找 setText(int) 方法。一定要注意表达式的返回值并在必要时做类型转换。注意即使你使用了一个没有的属性 data binding 也会正常工作。你可以为View上的任意setter方法创造一个属性。例如，support 库的 DrawerLayout 没有任何属性但是有很多的 set 方法，你可以通过 Automatic Setters 来调用这些方法。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">android</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">support</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">v4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">widget</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">DrawerLayout</span></span>
<span class="line"><span style="color:#A6ACCD;">    android</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    android</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    app</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">scrimColor</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{@color/scrim}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    app</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">drawerListener</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{fragment.drawerListener}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><h2 id="重命名-setters" tabindex="-1">重命名 Setters <a class="header-anchor" href="#重命名-setters" aria-label="Permalink to &quot;重命名 Setters&quot;">​</a></h2><p>有一些属性和它对应的 setter 方法是不匹配的。对于这些方法可以使用 <a href="https://developer.android.com/reference/android/databinding/BindingMethods.html" target="_blank" rel="noreferrer">BindingMethods</a>注解修改属性和 setter 方法的对应关系。必须存在一个包含 <a href="https://developer.android.com/reference/android/databinding/BindingMethod.html" target="_blank" rel="noreferrer">BindingMethod</a>注解的类，它会改变所有属性和 setter 方法的关联关系。例如<code>android:tint</code>实际上和 <a href="https://developer.android.com/reference/android/widget/ImageView.html#setImageTintList(android.content.res.ColorStateList)" target="_blank" rel="noreferrer">setImageTintList(ColorStateList)</a>方法相关联的而不是<code>setTint</code>。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">BindingMethods</span><span style="color:#89DDFF;">({</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">BindingMethod</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> android</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">widget</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ImageView</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                      </span><span style="color:#FFCB6B;">attribute</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android:tint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                      </span><span style="color:#FFCB6B;">method</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setImageTintList</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#89DDFF;">})</span></span></code></pre></div><h2 id="自定义-setters" tabindex="-1">自定义 Setters <a class="header-anchor" href="#自定义-setters" aria-label="Permalink to &quot;自定义 Setters&quot;">​</a></h2><p>一些属性需要自定义 binding 的逻辑。例如，没有一个相关的 setter 方法和<code>android:paddingLeft </code>属性相对应，只有<code>setPadding(left, top, right, bottom)</code>方法。开发者可以在 静态 binding adapter 方法上添加 <a href="https://developer.android.com/reference/android/databinding/BindingAdapter.html" target="_blank" rel="noreferrer">BindingAdapter</a> 注解来自定义一个属性。</p><p>binding 库已经提供了一些<code>BindingAdapters</code>定义的属性，<code>paddingLeft</code>就是其中之一：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">BindingAdapter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android:paddingLeft</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setPaddingLeft</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">View</span><span style="color:#A6ACCD;"> view</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> padding</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPadding</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">padding</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                   view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPaddingTop</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">                   view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPaddingRight</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">                   view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPaddingBottom</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Binding adapters 对于其他类型的自定义是很有用的，例如，一个自定义的 loader 可以用来关闭加载图片的线程。</p><p>当开发者的 binding adapters 和默认的 adapters 冲突时 默认的 adapters 会被覆盖。</p><p>你可以在一个 adapters 中接收多个参数。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">BindingAdapter</span><span style="color:#89DDFF;">({</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bind:imageUrl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bind:error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">loadImage</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ImageView</span><span style="color:#A6ACCD;"> view</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Drawable</span><span style="color:#A6ACCD;"> error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   Picasso</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">with</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getContext</span><span style="color:#89DDFF;">()).</span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">error</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">into</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">ImageView</span><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">imageUrl</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{venue.imageUrl}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{@drawable/venueError}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><p>当<strong>imageUrl</strong> 和 <strong>error</strong> 同是出现在 ImageView 中的时候这个adapter就会被调用并且 <em>imageUrl</em> 是 String 类型 <em>error</em> 是 drawable 类型。</p><ul><li>在匹配时自定义命名空间会被忽略</li><li>可以为 android 命名空间定义 adapter</li></ul><p>Binding adapter 可以选择在对应的方法中接收一个旧值，如果一个方法中含有旧值和新值，那么他们的顺序（因为旧值和新值的类型相同）为旧值前新值后：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">BindingAdapter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android:paddingLeft</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setPaddingLeft</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">View</span><span style="color:#A6ACCD;"> view</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> oldPadding</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> newPadding</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">oldPadding </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> newPadding</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPadding</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newPadding</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                       view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPaddingTop</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">                       view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPaddingRight</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">                       view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPaddingBottom</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>对于事件处理，只能用于只有一个方法的接口或抽象类。例如：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">BindingAdapter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android:onLayoutChange</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setOnLayoutChangeListener</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">View</span><span style="color:#A6ACCD;"> view</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> View</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OnLayoutChangeListener oldValue</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">       View</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OnLayoutChangeListener newValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Build</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VERSION</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SDK_INT </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> Build</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VERSION_CODES</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">HONEYCOMB</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">oldValue </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeOnLayoutChangeListener</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">oldValue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newValue </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addOnLayoutChangeListener</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newValue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>当一个 listener 包含多个方法时，它就必须被拆分成包含单个方法的多个接口。例如 <a href="https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html" target="_blank" rel="noreferrer">View.OnAttachStateChangeListener</a>含有两个方法：<a href="https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewAttachedToWindow(android.view.View)" target="_blank" rel="noreferrer">onViewAttachedToWindow()</a> 和 <a href="https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewDetachedFromWindow(android.view.View)" target="_blank" rel="noreferrer">onViewDetachedFromWindow()</a>，必须创建两个方法通过不同的属性来处理他们：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">TargetApi</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">VERSION_CODES</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">HONEYCOMB_MR1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OnViewDetachedFromWindow</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onViewDetachedFromWindow</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">View</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">v</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">TargetApi</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">VERSION_CODES</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">HONEYCOMB_MR1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OnViewAttachedToWindow</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onViewAttachedToWindow</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">View</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">v</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>由于修改其中的一个 listener 也会影响另外一个，所以必须创建3个方法：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">BindingAdapter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android:onViewAttachedToWindow</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setListener</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">View</span><span style="color:#A6ACCD;"> view</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">OnViewAttachedToWindow</span><span style="color:#A6ACCD;"> attached</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">setListener</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> attached</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">BindingAdapter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android:onViewDetachedFromWindow</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setListener</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">View</span><span style="color:#A6ACCD;"> view</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">OnViewDetachedFromWindow</span><span style="color:#A6ACCD;"> detached</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">setListener</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> detached</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">BindingAdapter</span><span style="color:#89DDFF;">({</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android:onViewDetachedFromWindow</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">android:onViewAttachedToWindow</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setListener</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">View</span><span style="color:#A6ACCD;"> view</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">OnViewDetachedFromWindow</span><span style="color:#A6ACCD;"> detach</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">OnViewAttachedToWindow</span><span style="color:#A6ACCD;"> attach</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">VERSION</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SDK_INT </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> VERSION_CODES</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">HONEYCOMB_MR1</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">OnAttachStateChangeListener</span><span style="color:#A6ACCD;"> newListener</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">detach </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> attach </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            newListener </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            newListener </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OnAttachStateChangeListener</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onViewAttachedToWindow</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">View</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">attach </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                        attach</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onViewAttachedToWindow</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onViewDetachedFromWindow</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">View</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">detach </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                        detach</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onViewDetachedFromWindow</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">OnAttachStateChangeListener</span><span style="color:#A6ACCD;"> oldListener </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ListenerUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trackListener</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                newListener</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> R</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onAttachStateChangeListener</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">oldListener </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeOnAttachStateChangeListener</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">oldListener</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newListener </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addOnAttachStateChangeListener</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newListener</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上面的例子相对来说复杂一点，因为需要调用 View 的 add 和 remove 方法而不是set方法。<code> android.databinding.adapters.ListenerUtil</code>工具类帮助追踪前一个listeners（弱引用的方式）所以它有可能已经被删除了。</p><p>通过在<code>OnViewDetachedFromWindow</code> 和 <code>OnViewAttachedToWindow</code>上面添加<code>@TargetApi(VERSION_CODES.HONEYCOMB_MR1)</code>注解，告诉 data binding 这些代码只能运行在Honeycomb MR1或以后的版本中。 <a href="https://developer.android.com/reference/android/view/View.html#addOnAttachStateChangeListener(android.view.View.OnAttachStateChangeListener)" target="_blank" rel="noreferrer">addOnAttachStateChangeListener(View.OnAttachStateChangeListener)</a>上的注解也是这样。</p><p>类型转换</p><h2 id="对象转换" tabindex="-1">对象转换 <a class="header-anchor" href="#对象转换" aria-label="Permalink to &quot;对象转换&quot;">​</a></h2><p>当 binding 表达式返回一个对象时，就会调用一个 setter（上面介绍的三种方式中匹配） 。这个对象将作为参数传递给这个 setter 方法。</p><p>使用<code>ObservableMaps</code>可以很方便的持有一个数据。例如：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@{userMap[&quot;lastName&quot;]}</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><p><code>userMap</code>返回的对象将被自动转换为<code>setText(CharSequence)</code>方法的参数。当无法自动转换时需要开发者在表达式中显示转换。</p><h2 id="自定义转换" tabindex="-1">自定义转换 <a class="header-anchor" href="#自定义转换" aria-label="Permalink to &quot;自定义转换&quot;">​</a></h2><p>有时一些特殊的类型需要自动的转换。例如设置View的背景：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">View</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">background</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{isError ? @color/red : @color/white}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><p>View 的背景需要一个<code>Drawable</code>，但是表达式返回的是一个整型的颜色值。需要将 <code>int</code>值转换成<code>ColorDrawable</code>。下面的静态方法实现了这个功能：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@BindingConversion</span></span>
<span class="line"><span style="color:#A6ACCD;">public static ColorDrawable convertColorToDrawable(int color) {</span></span>
<span class="line"><span style="color:#A6ACCD;">   return new ColorDrawable(color);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>* 注意这种转化发生在setter层，所以不允许在表达式中使用多种类型：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">View</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">background</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{isError ? @drawable/error : @color/white}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><h2 id="android-studio对-data-binding-的支持" tabindex="-1">Android Studio对 Data Binding 的支持 <a class="header-anchor" href="#android-studio对-data-binding-的支持" aria-label="Permalink to &quot;Android Studio对 Data Binding 的支持&quot;">​</a></h2><p>Android Studio 支持 Data Binding 的许多代码编辑特性。 data binding 表达式的如下特性：</p><ul><li>代码高亮显示</li><li>标记语言表达语法错误</li><li>XML代码补全</li><li>References, including <a href="https://www.jetbrains.com/help/idea/2016.1/navigation-in-source-code.html?origin=old_help" target="_blank" rel="noreferrer">navigation</a> (such as navigate to a declaration) and <a href="https://www.jetbrains.com/help/idea/2016.1/viewing-inline-documentation.html?origin=old_help" target="_blank" rel="noreferrer">quick documentation</a></li></ul><blockquote><p>注意 数组 和 泛型，例如  <a href="https://developer.android.com/reference/android/databinding/Observable.html" target="_blank" rel="noreferrer">Observable</a> 可能会误报错误。</p></blockquote><p>如果在 data binding 表达式中使用了默认值 它会在预览界面显示出来。就象下面的例子中一样，预览界面会显示 TextView 的默认值<code>PLACEHOLDER</code>。</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">TextView</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">layout_height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrap_content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#C792EA;">android</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@{user.firstName, default=PLACEHOLDER}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre></div><p>在设计阶段也可以使用 tools 属性来显示默认值，详见<a href="http://tools.android.com/tips/layout-designtime-attributes" target="_blank" rel="noreferrer">Designtime Layout Attributes</a>。</p>`,245),e=[p];function t(r,c,D,y,F,i){return a(),n("div",null,e)}const A=s(o,[["render",t]]);export{d as __pageData,A as default};
