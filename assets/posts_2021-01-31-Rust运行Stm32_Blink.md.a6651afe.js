import{_ as s,o as a,c as n,U as l}from"./chunks/framework.70292381.js";const A=JSON.parse('{"title":"Rust运行Stm32 Blink","description":"","frontmatter":{"title":"Rust运行Stm32 Blink","date":"2021-01-31T00:00:00.000Z","categories":["Rust"],"tags":["Stm32","Stm32F103C8T6"]},"headers":[],"relativePath":"posts/2021-01-31-Rust运行Stm32_Blink.md","filePath":"posts/2021-01-31-Rust运行Stm32_Blink.md"}'),p={name:"posts/2021-01-31-Rust运行Stm32_Blink.md"},o=l(`<h3 id="用rust语言编写stm32f103c8t6程序" tabindex="-1">用Rust语言编写Stm32F103c8t6程序 <a class="header-anchor" href="#用rust语言编写stm32f103c8t6程序" aria-label="Permalink to &quot;用Rust语言编写Stm32F103c8t6程序&quot;">​</a></h3><h5 id="需要的设备" tabindex="-1">需要的设备 <a class="header-anchor" href="#需要的设备" aria-label="Permalink to &quot;需要的设备&quot;">​</a></h5><ul><li><p>STM32f103c8t6单片机一个</p></li><li><p>ST-Link V2 仿真器</p></li><li><p>杜邦线</p></li><li><p>面包板 [可选]</p><p><img src="https://pic3.zhimg.com/80/v2-910f31baa98e96a99fef314124a9f25a_720w.jpg" alt="stm32单片机"></p><p><img src="https://pic1.zhimg.com/80/v2-a55275841c947fb6b84d5f3bdcff6acc_720w.jpg" alt="仿真器"></p></li></ul><h5 id="需要安装的软件" tabindex="-1">需要安装的软件 <a class="header-anchor" href="#需要安装的软件" aria-label="Permalink to &quot;需要安装的软件&quot;">​</a></h5><ul><li><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">rustup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">target</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">thumbv7m-none-eabi</span></span></code></pre></div></li><li><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">openocd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gdb-multiarch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">binutils-arm-none-eabi</span></span></code></pre></div></li></ul><h3 id="先让项目跑起来-blink-date-2021-1-31" tabindex="-1">先让项目跑起来 - blink Date: 2021-1-31 <a class="header-anchor" href="#先让项目跑起来-blink-date-2021-1-31" aria-label="Permalink to &quot;先让项目跑起来 - blink Date: 2021-1-31&quot;">​</a></h3><p>连接硬件 stm32 与stlink连接, 并将 stm32 <code>boot-1</code> 置 1 <code>boot-0</code> 置 1</p><p>在项目路径下运行指令,配置 <code>gdb</code></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">set auto-load safe-path </span><span style="color:#89DDFF;">$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/.gdbinit</span></span></code></pre></div><p>新建一个rust项目,修改<code>Cargo.toml</code> 增加如下配置:</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">dependencies</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">embedded-hal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.2.3</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">nb </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.1.2</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">cortex-m </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.6.2</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">cortex-m-rt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.6.11</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Panic behaviour, see https://crates.io/keywords/panic-impl for alternatives</span></span>
<span class="line"><span style="color:#A6ACCD;">panic-halt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.2.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">dependencies</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">stm32f1xx-hal</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">version </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.6.1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">features </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stm32f103</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">medium</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span></code></pre></div><p>在项目根路径添加如下文件</p><ol><li><code>.cargo/config</code></li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[target.thumbv7m-none-eabi]</span></span>
<span class="line"><span style="color:#A6ACCD;">runner = &#39;gdb-multiarch&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">rustflags = [</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;-C&quot;, &quot;link-arg=-Tlink.x&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">[build]</span></span>
<span class="line"><span style="color:#A6ACCD;">target = &quot;thumbv7m-none-eabi&quot;</span></span></code></pre></div><ol start="2"><li><code>memory.x </code></li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">/* Linker script for the STM32F103C8T6 */</span></span>
<span class="line"><span style="color:#A6ACCD;">MEMORY</span></span>
<span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  FLASH : ORIGIN = 0x08000000, LENGTH = 64K</span></span>
<span class="line"><span style="color:#A6ACCD;">  RAM : ORIGIN = 0x20000000, LENGTH = 20K</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><ol start="3"><li><p><code>.gdbinit</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">target remote :3333</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">monitor arm semihosting enable</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># # send captured ITM to the file itm.fifo</span></span>
<span class="line"><span style="color:#A6ACCD;"># # (the microcontroller SWO pin must be connected to the programmer SWO pin)</span></span>
<span class="line"><span style="color:#A6ACCD;"># # 8000000 must match the core clock frequency</span></span>
<span class="line"><span style="color:#A6ACCD;"># monitor tpiu config internal itm.fifo uart off 8000000</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># # OR: make the microcontroller SWO pin output compatible with UART (8N1)</span></span>
<span class="line"><span style="color:#A6ACCD;"># # 2000000 is the frequency of the SWO pin</span></span>
<span class="line"><span style="color:#A6ACCD;"># monitor tpiu config external uart off 8000000 2000000</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># # enable ITM port 0</span></span>
<span class="line"><span style="color:#A6ACCD;"># monitor itm port 0 on</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">load</span></span>
<span class="line"><span style="color:#A6ACCD;">step</span></span></code></pre></div></li><li><p><code>openocd.cfg</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">source [find interface/stlink-v2.cfg]</span></span>
<span class="line"><span style="color:#A6ACCD;">source [find target/stm32f1x.cfg]</span></span></code></pre></div></li></ol><p>修改<code>main.rs</code>文件:</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//! Blinks an LED</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//!</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//! This assumes that a LED is connected to pc13 as is the case on the blue pill board.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//!</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//! Note: Without additional hardware, PC13 should not be used to drive an LED, see page 5.1.2 of</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//! the reference manual for an explanation. This is not an issue on the blue pill.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">#![</span><span style="color:#A6ACCD;">deny</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">unsafe_code</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#89DDFF;">#![</span><span style="color:#A6ACCD;">no_std</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">#![</span><span style="color:#A6ACCD;">no_main</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> panic_halt </span><span style="color:#F78C6C;">as</span><span style="color:#FFCB6B;"> _</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> nb</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">block</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> cortex_m_rt</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">entry</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> embedded_hal</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">digital</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">v2</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">OutputPin</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> stm32f1xx_hal</span><span style="color:#89DDFF;">::{</span><span style="color:#FFCB6B;">pac</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> prelude</span><span style="color:#89DDFF;">::*,</span><span style="color:#FFCB6B;"> timer</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Timer</span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Get access to the core peripherals from the cortex-m crate</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> cp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">cortex_m</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Peripherals</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">take</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">unwrap</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Get access to the device specific peripherals from the peripheral access crate</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> dp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pac</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Peripherals</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">take</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">unwrap</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Take ownership over the raw flash and rcc devices and convert them into the corresponding</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // HAL structs</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> flash </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> dp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">FLASH</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">constrain</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> rcc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> dp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RCC</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">constrain</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Freeze the configuration of all the clocks in the system and store the frozen frequencies in</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // \`clocks\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> clocks </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> rcc</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cfgr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">freeze</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> flash</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">acr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Acquire the GPIOC peripheral</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> gpioc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> dp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">GPIOC</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> rcc</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">apb2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Configure gpio C pin 13 as a push-pull output. The \`crh\` register is passed to the function</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // in order to configure the port. For pins 0-7, crl should be passed instead.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> led </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gpioc</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pc13</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">into_push_pull_output</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> gpioc</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">crh</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Configure the syst timer to trigger an update every second</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> timer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Timer</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">syst</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SYST</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">clocks</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">start_count_down</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hz</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Wait for the timer to trigger an update and change the state of the LED</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">loop</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">block!</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">timer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait</span><span style="color:#89DDFF;">()).</span><span style="color:#82AAFF;">unwrap</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        led</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set_high</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">unwrap</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">block!</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">timer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wait</span><span style="color:#89DDFF;">()).</span><span style="color:#82AAFF;">unwrap</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        led</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set_low</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">unwrap</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>好了,项目的准备工作已经完成了. 运行 <code>cargo build</code> 构建 target 文件, 打开终端 运行 <code>openocd</code></p><p><img src="https://res.cloudinary.com/xiaolong/image/upload/v1612102124/rust_stm32/openocd_jidavu.png" alt="openocd"></p><p>代开另外一个终端运行 <code>cargo rust</code></p><p><img src="https://res.cloudinary.com/xiaolong/image/upload/v1612102121/rust_stm32/cargo_run_nregbm.png" alt="cargo run"></p><p>输入任意字符, 输入 <code>c</code> 运行blink</p><p><img src="https://res.cloudinary.com/xiaolong/image/upload/v1612102121/rust_stm32/dgb_v6ctme.png" alt="gdb"></p><p>这时单片机应该已经运行起来了</p><p><img src="https://res.cloudinary.com/xiaolong/image/upload/v1612102124/rust_stm32/stm32_rweryr.jpg" alt="stm32"></p>`,27),e=[o];function t(c,r,i,y,D,F){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
