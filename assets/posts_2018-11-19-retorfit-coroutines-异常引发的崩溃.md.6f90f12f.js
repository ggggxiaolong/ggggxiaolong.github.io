import{_ as s,o as n,c as a,U as l}from"./chunks/framework.70292381.js";const F=JSON.parse('{"title":"Retorfit Coroutines 异常引发的崩溃","description":"","frontmatter":{"title":"Retorfit Coroutines 异常引发的崩溃","date":"2018-11-19T12:00:00.000Z","categories":["Android"],"tags":["Retorfit","Coroutines"]},"headers":[],"relativePath":"posts/2018-11-19-retorfit-coroutines-异常引发的崩溃.md","filePath":"posts/2018-11-19-retorfit-coroutines-异常引发的崩溃.md"}'),o={name:"posts/2018-11-19-retorfit-coroutines-异常引发的崩溃.md"},p=l(`<p>最近项目中突然爆发了一波由网络超时造成的崩溃问题(之前也有过几次,但是没有引起足够的重视).花费了一天的时间终于解决了[开心]</p><h4 id="事情是这样的" tabindex="-1">事情是这样的: <a class="header-anchor" href="#事情是这样的" aria-label="Permalink to &quot;事情是这样的:&quot;">​</a></h4><p>我在项目中使用<code>kotlin</code>作为开发语言,同时也引入了<code>coroutnies(协程)</code>,使用协程替代了线程池.想要在api层使用协程,于是<code>Github</code>一波决定引入 <a href="https://github.com/JakeWharton" target="_blank" rel="noreferrer">JakeWharton</a>/<strong><a href="https://github.com/JakeWharton/retrofit2-kotlin-coroutines-adapter" target="_blank" rel="noreferrer">retrofit2-kotlin-coroutines-adapter</a></strong></p><ol><li>一开始还觉得很诡异,因为我在网络请求的外围写了<code> try cache</code> 捕获异常然后交给个上层做处理,而且不是所有的网络超时异常都捕获不到</li><li>通过打印日志发现只有在页面销毁调的时候会引发异常</li><li>继续跟踪发现在页面销毁的时候调用<code>coroutines</code>的<code>job</code>取消协程时网络请求并没用被取消. 上一段<a href="https://github.com/JakeWharton/retrofit2-kotlin-coroutines-adapter/blob/master/src/main/java/com/jakewharton/retrofit2/adapter/kotlin/coroutines/CoroutineCallAdapterFactory.kt" target="_blank" rel="noreferrer">代码</a>:</li></ol><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BodyCallAdapter</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> responseType: </span><span style="color:#FFCB6B;">Type</span></span>
<span class="line"><span style="color:#A6ACCD;">  ) : </span><span style="color:#FFCB6B;">CallAdapter</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">Deferred</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">&gt;&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">responseType</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> responseType</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">adapt</span><span style="color:#A6ACCD;">(call: </span><span style="color:#FFCB6B;">Call</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">&gt;): </span><span style="color:#FFCB6B;">Deferred</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> deferred </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CompletableDeferred</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">      deferred.</span><span style="color:#82AAFF;">invokeOnCompletion</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (deferred.isCancelled) {</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// 这里打印日志</span></span>
<span class="line"><span style="color:#A6ACCD;">          call.</span><span style="color:#82AAFF;">cancel</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">      call.</span><span style="color:#82AAFF;">enqueue</span><span style="color:#A6ACCD;">(object : </span><span style="color:#FFCB6B;">Callback</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onFailure</span><span style="color:#A6ACCD;">(call: </span><span style="color:#FFCB6B;">Call</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">&gt;, t: </span><span style="color:#FFCB6B;">Throwable</span><span style="color:#A6ACCD;">) {</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// 这里打印日志</span></span>
<span class="line"><span style="color:#A6ACCD;">          deferred.</span><span style="color:#82AAFF;">completeExceptionally</span><span style="color:#A6ACCD;">(t)</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onResponse</span><span style="color:#A6ACCD;">(call: </span><span style="color:#FFCB6B;">Call</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">&gt;, response: </span><span style="color:#FFCB6B;">Response</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">&gt;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (response.isSuccessful) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            deferred.</span><span style="color:#82AAFF;">complete</span><span style="color:#A6ACCD;">(response.</span><span style="color:#82AAFF;">body</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">!!</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">          } </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">            deferred.</span><span style="color:#82AAFF;">completeExceptionally</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">HttpException</span><span style="color:#A6ACCD;">(response))</span></span>
<span class="line"><span style="color:#A6ACCD;">          }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">      })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> deferred</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span></code></pre></div><p>发现<code>cancle</code>的日志在<code>onFailuer</code>后面,debug去看才发现原来<code>deferred.isCancelled</code> 返回true是因为<code>deferred.completeExceptionally(t)</code> 触发的. 如果是这种原因才触发取消网络请求那取消就没有意义了 下面这两个是这个库的issues: [1] <a href="https://github.com/JakeWharton/retrofit2-kotlin-coroutines-adapter/issues/7" target="_blank" rel="noreferrer">[Question] Coroutine cancellation is not handled, right? #7</a> [2] <a href="https://github.com/JakeWharton/retrofit2-kotlin-coroutines-adapter/issues/33" target="_blank" rel="noreferrer">Is there any way to catch timeout exception using your coroutines?</a> 想了半天也没办法把<code>job</code>或者<code>coroutinesContext</code>传给api返回的<code>Deferred</code>对象,而且<code>suspend</code>方法也不能获取 <code>coroutinesContext</code>对象所以最终只能在调用的时候把<code>job</code> 对象作为参数传到下层了...虽然不优雅但是能解决问题了</p><blockquote><p>如果你也遇到了这样的问题希望我的解决方法能给你一个思路,如果你有更好的解决方法请你也告诉我一声 😄 写一下伪代码:</p></blockquote><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// api service</span></span>
<span class="line"><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">api</span><span style="color:#A6ACCD;">(): </span><span style="color:#FFCB6B;">Deferred</span><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">&gt; </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CompletableDeferred</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Activity</span><span style="color:#A6ACCD;">(): </span><span style="color:#FFCB6B;">CoroutineScope</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> job </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Job</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> coroutineContext: </span><span style="color:#FFCB6B;">CoroutineContext</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Dispatchers.Default </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> job</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">runApi</span><span style="color:#A6ACCD;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">launch</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> deferred </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">api</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">      job.</span><span style="color:#82AAFF;">invokeOnCompletion</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (job.isCancelled)</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">// 在检测到job取消的时候取消网络请求</span></span>
<span class="line"><span style="color:#A6ACCD;">          deferred.</span><span style="color:#82AAFF;">cancel</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">      }</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">val</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> deferred.</span><span style="color:#82AAFF;">await</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">//todo</span></span>
<span class="line"><span style="color:#A6ACCD;">      } </span><span style="color:#89DDFF;">catch</span><span style="color:#A6ACCD;"> (t: </span><span style="color:#FFCB6B;">Throwable</span><span style="color:#A6ACCD;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// exception control</span></span>
<span class="line"><span style="color:#A6ACCD;">      }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">fun</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">destory</span><span style="color:#A6ACCD;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    job.</span><span style="color:#82AAFF;">cancel</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h4 id="emmm-还是打算插一句为什么要使用这个库" tabindex="-1">emmm 还是打算插一句为什么要使用这个库: <a class="header-anchor" href="#emmm-还是打算插一句为什么要使用这个库" aria-label="Permalink to &quot;emmm  还是打算插一句为什么要使用这个库:&quot;">​</a></h4><p>由于网络请求是超时操作,而安卓的页面[activity, fragment]什么时候销毁一般是由用户操作决定的.所以会有生命周期不一致的问题,网络请求又会持有页面的索引[内部类,会持有外部类的索引].所以在设计的时候一般会在页面销毁的时候取消网络请求,最开始使用的是<code>RxJava + CompositeDisposable </code> 在页面销毁的时候通过调用 <code>CompositeDisposable</code> 的 close 方法取消网络请求,之后使用<code>LiveData + RxJava + AutoDispose</code> 后来觉得既然引入了<code>LiveData</code> 在引入 <code>RxJava</code>有些多余了(因为大部分RxJava的使用场景都在网络请求上),同时也接触了 <code>koltin</code> 的<code>coroutnies</code> 找到了大神写的库竟然不用关心网络请求的取消[嗯,大神就是大神]于是就引入了...</p>`,10),e=[p];function t(c,r,C,A,y,i){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
